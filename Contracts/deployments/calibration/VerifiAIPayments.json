{
  "address": "0x1B4d1eDE4F7F22BE0Ce596203765291BBb59E9dC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdfc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "datasetId",
          "type": "uint256"
        }
      ],
      "name": "EscrowCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EscrowRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EscrowReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum VerifiAIPayments.PaymentType",
          "name": "paymentType",
          "type": "uint8"
        }
      ],
      "name": "PaymentProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "canceller",
          "type": "address"
        }
      ],
      "name": "SubscriptionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPerPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextPaymentDue",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUBSCRIPTION_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_ESCROW_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PLATFORM_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "datasetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "createEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountPerPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPeriods",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "datasetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "accessLevel",
          "type": "string"
        }
      ],
      "name": "createSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEscrowId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPaymentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSubscriptionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "escrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "internalType": "enum VerifiAIPayments.EscrowStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "datasetId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserEscrows",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserSubscriptions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "isPaymentDue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplace",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "platformFee",
          "type": "uint256"
        },
        {
          "internalType": "enum VerifiAIPayments.PaymentType",
          "name": "paymentType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "relatedId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "datasetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "processPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "processSubscriptionPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        }
      ],
      "name": "refundEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        }
      ],
      "name": "releaseEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketplace",
          "type": "address"
        }
      ],
      "name": "setMarketplace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "subscriptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "subscriber",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountPerPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastPayment",
          "type": "uint256"
        },
        {
          "internalType": "enum VerifiAIPayments.SubscriptionStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "datasetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "accessLevel",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdfc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userEscrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userSubscriptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x39385ea4a34a62f19f8b7afbf72292221a7bc6807ed908a46736051075beb400",
  "receipt": {
    "to": null,
    "from": "0x268d62aba7C42fCB4D72A83137DB503935f764fF",
    "contractAddress": "0x1B4d1eDE4F7F22BE0Ce596203765291BBb59E9dC",
    "transactionIndex": 0,
    "gasUsed": "105006332",
    "logsBloom": "0x00000000000000000000000000000002000000100000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000020000000000000000000000400020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xaa5d9c4d5ead1d8a18e7dbe162fed66bde471d0178466b7ca565e7f24e1b91ee",
    "transactionHash": "0x39385ea4a34a62f19f8b7afbf72292221a7bc6807ed908a46736051075beb400",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2817529,
        "transactionHash": "0x39385ea4a34a62f19f8b7afbf72292221a7bc6807ed908a46736051075beb400",
        "address": "0x1B4d1eDE4F7F22BE0Ce596203765291BBb59E9dC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000268d62aba7c42fcb4d72a83137db503935f764ff"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xaa5d9c4d5ead1d8a18e7dbe162fed66bde471d0178466b7ca565e7f24e1b91ee"
      }
    ],
    "blockNumber": 2817529,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0f703F65596731cFc036cE4eb2acEF37B9169a6e",
    "0x268d62aba7C42fCB4D72A83137DB503935f764fF"
  ],
  "numDeployments": 1,
  "solcInputHash": "9e64ae3f474ffb89e119af793cdcef3a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdfc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datasetId\",\"type\":\"uint256\"}],\"name\":\"EscrowCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscrowRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscrowReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum VerifiAIPayments.PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"}],\"name\":\"PaymentProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"canceller\",\"type\":\"address\"}],\"name\":\"SubscriptionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPerPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextPaymentDue\",\"type\":\"uint256\"}],\"name\":\"SubscriptionPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUBSCRIPTION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_ESCROW_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATFORM_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"datasetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"createEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPeriods\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"datasetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"accessLevel\",\"type\":\"string\"}],\"name\":\"createSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEscrowId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPaymentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSubscriptionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"enum VerifiAIPayments.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"datasetId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserEscrows\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserSubscriptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"}],\"name\":\"isPaymentDue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"},{\"internalType\":\"enum VerifiAIPayments.PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relatedId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"datasetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"processPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"}],\"name\":\"processSubscriptionPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"refundEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"}],\"name\":\"releaseEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"}],\"name\":\"setMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayment\",\"type\":\"uint256\"},{\"internalType\":\"enum VerifiAIPayments.SubscriptionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"datasetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"accessLevel\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdfc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userEscrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSubscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"USDFC payment processor with escrow and subscription management\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"cancelSubscription(uint256)\":{\"params\":{\"subscriptionId\":\"Subscription ID to cancel\"}},\"constructor\":{\"details\":\"Constructor\",\"params\":{\"_treasury\":\"Platform treasury address\",\"_usdfc\":\"USDFC token contract address\"}},\"createEscrow(address,uint256,uint256,uint256,string)\":{\"params\":{\"amount\":\"Escrow amount\",\"datasetId\":\"Related dataset ID\",\"description\":\"Escrow description\",\"releaseTime\":\"When funds can be released\",\"seller\":\"Seller address\"}},\"createSubscription(address,uint256,uint256,uint256,uint256,string)\":{\"params\":{\"accessLevel\":\"Access level description\",\"amountPerPeriod\":\"Amount to pay per period\",\"datasetId\":\"Related dataset ID\",\"periodDuration\":\"Duration of each period in seconds\",\"provider\":\"Service provider address\",\"totalPeriods\":\"Total number of periods\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"amount\":\"Amount to withdraw\"}},\"getUserEscrows(address)\":{\"params\":{\"user\":\"User address\"},\"returns\":{\"_0\":\"Array of escrow IDs\"}},\"getUserSubscriptions(address)\":{\"params\":{\"user\":\"User address\"},\"returns\":{\"_0\":\"Array of subscription IDs\"}},\"isPaymentDue(uint256)\":{\"params\":{\"subscriptionId\":\"Subscription ID\"},\"returns\":{\"_0\":\"Whether payment is due\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"processPayment(address,uint256,uint256,string)\":{\"params\":{\"amount\":\"Payment amount\",\"datasetId\":\"Related dataset ID\",\"description\":\"Payment description\",\"recipient\":\"Payment recipient\"}},\"processSubscriptionPayment(uint256)\":{\"params\":{\"subscriptionId\":\"Subscription ID\"}},\"refundEscrow(uint256)\":{\"params\":{\"escrowId\":\"Escrow ID to refund\"}},\"releaseEscrow(uint256)\":{\"params\":{\"escrowId\":\"Escrow ID to release\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setMarketplace(address)\":{\"params\":{\"_marketplace\":\"Marketplace contract address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateTreasury(address)\":{\"params\":{\"newTreasury\":\"New treasury address\"}}},\"title\":\"VerifiAIPayments\",\"version\":1},\"userdoc\":{\"events\":{\"EscrowCreated(uint256,address,address,uint256,uint256)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"MAX_SUBSCRIPTION_DURATION()\":{\"notice\":\"Maximum subscription duration (1 year)\"},\"MIN_ESCROW_DURATION()\":{\"notice\":\"Minimum escrow duration (1 hour)\"},\"PLATFORM_FEE()\":{\"notice\":\"Platform fee in basis points (100 = 1%)\"},\"cancelSubscription(uint256)\":{\"notice\":\"Cancel subscription\"},\"createEscrow(address,uint256,uint256,uint256,string)\":{\"notice\":\"Create escrow for secure transactions\"},\"createSubscription(address,uint256,uint256,uint256,uint256,string)\":{\"notice\":\"Create subscription for recurring payments\"},\"currentEscrowId()\":{\"notice\":\"Current escrow ID counter\"},\"currentPaymentId()\":{\"notice\":\"Current payment ID counter\"},\"currentSubscriptionId()\":{\"notice\":\"Current subscription ID counter\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Emergency withdrawal (admin only)\"},\"escrows(uint256)\":{\"notice\":\"Mapping of escrow ID to escrow details\"},\"getUserEscrows(address)\":{\"notice\":\"Get user's escrows\"},\"getUserSubscriptions(address)\":{\"notice\":\"Get user's subscriptions\"},\"isPaymentDue(uint256)\":{\"notice\":\"Check if subscription payment is due\"},\"marketplace()\":{\"notice\":\"VerifiAI marketplace contract address\"},\"pause()\":{\"notice\":\"Emergency pause function\"},\"payments(uint256)\":{\"notice\":\"Mapping of payment ID to payment record\"},\"processPayment(address,uint256,uint256,string)\":{\"notice\":\"Process one-time payment\"},\"processSubscriptionPayment(uint256)\":{\"notice\":\"Process subscription payment\"},\"refundEscrow(uint256)\":{\"notice\":\"Refund escrow to buyer (only before release time or by admin)\"},\"releaseEscrow(uint256)\":{\"notice\":\"Release escrow funds to seller\"},\"setMarketplace(address)\":{\"notice\":\"Set marketplace contract address (admin only)\"},\"subscriptions(uint256)\":{\"notice\":\"Mapping of subscription ID to subscription details\"},\"treasury()\":{\"notice\":\"Platform treasury address\"},\"unpause()\":{\"notice\":\"Unpause function\"},\"updateTreasury(address)\":{\"notice\":\"Update treasury address\"},\"usdfc()\":{\"notice\":\"USDFC stablecoin contract\"},\"userEscrows(address,uint256)\":{\"notice\":\"Mapping of user to their escrow IDs (as buyer)\"},\"userSubscriptions(address,uint256)\":{\"notice\":\"Mapping of user to their subscription IDs\"}},\"notice\":\"Handles all payment operations for the VerifiAI marketplace\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VerifiAIPayments.sol\":\"VerifiAIPayments\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/VerifiAIPayments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n/**\\n * @title VerifiAIPayments\\n * @dev USDFC payment processor with escrow and subscription management\\n * @notice Handles all payment operations for the VerifiAI marketplace\\n */\\ncontract VerifiAIPayments is Ownable, ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Platform fee in basis points (100 = 1%)\\n    uint256 public constant PLATFORM_FEE = 250; // 2.5%\\n    \\n    /// @notice Maximum subscription duration (1 year)\\n    uint256 public constant MAX_SUBSCRIPTION_DURATION = 365 days;\\n    \\n    /// @notice Minimum escrow duration (1 hour)\\n    uint256 public constant MIN_ESCROW_DURATION = 1 hours;\\n\\n    /// @notice USDFC stablecoin contract\\n    IERC20 public immutable usdfc;\\n    \\n    /// @notice Platform treasury address\\n    address public treasury;\\n    \\n    /// @notice VerifiAI marketplace contract address\\n    address public marketplace;\\n\\n    /// @notice Current escrow ID counter\\n    uint256 public currentEscrowId;\\n    \\n    /// @notice Current subscription ID counter\\n    uint256 public currentSubscriptionId;\\n\\n    /// @notice Enumeration for payment types\\n    enum PaymentType {\\n        ONE_TIME,\\n        SUBSCRIPTION,\\n        ESCROW,\\n        STAKE\\n    }\\n\\n    /// @notice Enumeration for escrow status\\n    enum EscrowStatus {\\n        ACTIVE,\\n        COMPLETED,\\n        DISPUTED,\\n        REFUNDED,\\n        CANCELLED\\n    }\\n\\n    /// @notice Enumeration for subscription status\\n    enum SubscriptionStatus {\\n        ACTIVE,\\n        PAUSED,\\n        CANCELLED,\\n        EXPIRED\\n    }\\n\\n    /// @notice Structure for escrow details\\n    struct EscrowDetails {\\n        uint256 id;\\n        address buyer;\\n        address seller;\\n        uint256 amount;\\n        uint256 createdAt;\\n        uint256 releaseTime;\\n        EscrowStatus status;\\n        string description;\\n        uint256 datasetId;\\n    }\\n\\n    /// @notice Structure for subscription details\\n    struct Subscription {\\n        uint256 id;\\n        address subscriber;\\n        address provider;\\n        uint256 amountPerPeriod;\\n        uint256 periodDuration;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 lastPayment;\\n        SubscriptionStatus status;\\n        uint256 datasetId;\\n        string accessLevel;\\n    }\\n\\n    /// @notice Structure for payment record\\n    struct PaymentRecord {\\n        uint256 id;\\n        address payer;\\n        address recipient;\\n        uint256 amount;\\n        uint256 platformFee;\\n        PaymentType paymentType;\\n        uint256 timestamp;\\n        uint256 relatedId; // escrow ID, subscription ID, etc.\\n        string description;\\n    }\\n\\n    /// @notice Mapping of escrow ID to escrow details\\n    mapping(uint256 => EscrowDetails) public escrows;\\n    \\n    /// @notice Mapping of subscription ID to subscription details\\n    mapping(uint256 => Subscription) public subscriptions;\\n    \\n    /// @notice Mapping of payment ID to payment record\\n    mapping(uint256 => PaymentRecord) public payments;\\n    \\n    /// @notice Mapping of user to their subscription IDs\\n    mapping(address => uint256[]) public userSubscriptions;\\n    \\n    /// @notice Mapping of user to their escrow IDs (as buyer)\\n    mapping(address => uint256[]) public userEscrows;\\n    \\n    /// @notice Current payment ID counter\\n    uint256 public currentPaymentId;\\n\\n    /// @notice Events\\n    event EscrowCreated(\\n        uint256 indexed escrowId,\\n        address indexed buyer,\\n        address indexed seller,\\n        uint256 amount,\\n        uint256 datasetId\\n    );\\n\\n    event EscrowReleased(\\n        uint256 indexed escrowId,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n\\n    event EscrowRefunded(\\n        uint256 indexed escrowId,\\n        address indexed buyer,\\n        uint256 amount\\n    );\\n\\n    event SubscriptionCreated(\\n        uint256 indexed subscriptionId,\\n        address indexed subscriber,\\n        address indexed provider,\\n        uint256 amountPerPeriod,\\n        uint256 duration\\n    );\\n\\n    event SubscriptionPayment(\\n        uint256 indexed subscriptionId,\\n        uint256 amount,\\n        uint256 nextPaymentDue\\n    );\\n\\n    event SubscriptionCancelled(\\n        uint256 indexed subscriptionId,\\n        address indexed canceller\\n    );\\n\\n    event PaymentProcessed(\\n        uint256 indexed paymentId,\\n        address indexed payer,\\n        address indexed recipient,\\n        uint256 amount,\\n        PaymentType paymentType\\n    );\\n\\n    /// @notice Modifiers\\n    modifier onlyMarketplace() {\\n        require(msg.sender == marketplace, \\\"Only marketplace\\\");\\n        _;\\n    }\\n\\n    modifier validEscrow(uint256 escrowId) {\\n        require(escrowId > 0 && escrowId <= currentEscrowId, \\\"Invalid escrow ID\\\");\\n        _;\\n    }\\n\\n    modifier validSubscription(uint256 subscriptionId) {\\n        require(subscriptionId > 0 && subscriptionId <= currentSubscriptionId, \\\"Invalid subscription ID\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor\\n     * @param _usdfc USDFC token contract address\\n     * @param _treasury Platform treasury address\\n     */\\n    constructor(\\n        address _usdfc,\\n        address _treasury\\n    ) Ownable(msg.sender) {\\n        require(_usdfc != address(0), \\\"Invalid USDFC address\\\");\\n        require(_treasury != address(0), \\\"Invalid treasury address\\\");\\n        \\n        usdfc = IERC20(_usdfc);\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice Set marketplace contract address (admin only)\\n     * @param _marketplace Marketplace contract address\\n     */\\n    function setMarketplace(address _marketplace) external onlyOwner {\\n        require(_marketplace != address(0), \\\"Invalid marketplace address\\\");\\n        marketplace = _marketplace;\\n    }\\n\\n    /**\\n     * @notice Process one-time payment\\n     * @param recipient Payment recipient\\n     * @param amount Payment amount\\n     * @param datasetId Related dataset ID\\n     * @param description Payment description\\n     */\\n    function processPayment(\\n        address recipient,\\n        uint256 amount,\\n        uint256 datasetId,\\n        string memory description\\n    ) external onlyMarketplace nonReentrant whenNotPaused {\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(amount > 0, \\\"Amount must be positive\\\");\\n\\n        uint256 platformFee = (amount * PLATFORM_FEE) / 10000;\\n        uint256 recipientAmount = amount - platformFee;\\n\\n        // Transfer tokens\\n        usdfc.safeTransferFrom(msg.sender, treasury, platformFee);\\n        usdfc.safeTransferFrom(msg.sender, recipient, recipientAmount);\\n\\n        // Record payment\\n        currentPaymentId++;\\n        payments[currentPaymentId] = PaymentRecord({\\n            id: currentPaymentId,\\n            payer: msg.sender,\\n            recipient: recipient,\\n            amount: amount,\\n            platformFee: platformFee,\\n            paymentType: PaymentType.ONE_TIME,\\n            timestamp: block.timestamp,\\n            relatedId: datasetId,\\n            description: description\\n        });\\n\\n        emit PaymentProcessed(\\n            currentPaymentId,\\n            msg.sender,\\n            recipient,\\n            amount,\\n            PaymentType.ONE_TIME\\n        );\\n    }\\n\\n    /**\\n     * @notice Create escrow for secure transactions\\n     * @param seller Seller address\\n     * @param amount Escrow amount\\n     * @param releaseTime When funds can be released\\n     * @param datasetId Related dataset ID\\n     * @param description Escrow description\\n     */\\n    function createEscrow(\\n        address seller,\\n        uint256 amount,\\n        uint256 releaseTime,\\n        uint256 datasetId,\\n        string memory description\\n    ) external nonReentrant whenNotPaused {\\n        require(seller != address(0), \\\"Invalid seller\\\");\\n        require(amount > 0, \\\"Amount must be positive\\\");\\n        require(releaseTime > block.timestamp + MIN_ESCROW_DURATION, \\\"Invalid release time\\\");\\n\\n        // Transfer tokens to escrow\\n        usdfc.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        currentEscrowId++;\\n        escrows[currentEscrowId] = EscrowDetails({\\n            id: currentEscrowId,\\n            buyer: msg.sender,\\n            seller: seller,\\n            amount: amount,\\n            createdAt: block.timestamp,\\n            releaseTime: releaseTime,\\n            status: EscrowStatus.ACTIVE,\\n            description: description,\\n            datasetId: datasetId\\n        });\\n\\n        userEscrows[msg.sender].push(currentEscrowId);\\n\\n        emit EscrowCreated(currentEscrowId, msg.sender, seller, amount, datasetId);\\n    }\\n\\n    /**\\n     * @notice Release escrow funds to seller\\n     * @param escrowId Escrow ID to release\\n     */\\n    function releaseEscrow(uint256 escrowId) \\n        external \\n        validEscrow(escrowId) \\n        nonReentrant \\n    {\\n        EscrowDetails storage escrow = escrows[escrowId];\\n        require(escrow.status == EscrowStatus.ACTIVE, \\\"Escrow not active\\\");\\n        require(\\n            msg.sender == escrow.buyer || \\n            msg.sender == escrow.seller || \\n            msg.sender == owner() ||\\n            block.timestamp >= escrow.releaseTime,\\n            \\\"Not authorized to release\\\"\\n        );\\n\\n        escrow.status = EscrowStatus.COMPLETED;\\n\\n        uint256 platformFee = (escrow.amount * PLATFORM_FEE) / 10000;\\n        uint256 sellerAmount = escrow.amount - platformFee;\\n\\n        // Transfer funds\\n        usdfc.safeTransfer(treasury, platformFee);\\n        usdfc.safeTransfer(escrow.seller, sellerAmount);\\n\\n        emit EscrowReleased(escrowId, escrow.seller, sellerAmount);\\n    }\\n\\n    /**\\n     * @notice Refund escrow to buyer (only before release time or by admin)\\n     * @param escrowId Escrow ID to refund\\n     */\\n    function refundEscrow(uint256 escrowId) \\n        external \\n        validEscrow(escrowId) \\n        nonReentrant \\n    {\\n        EscrowDetails storage escrow = escrows[escrowId];\\n        require(escrow.status == EscrowStatus.ACTIVE, \\\"Escrow not active\\\");\\n        require(\\n            msg.sender == escrow.buyer || \\n            msg.sender == owner(),\\n            \\\"Not authorized to refund\\\"\\n        );\\n\\n        escrow.status = EscrowStatus.REFUNDED;\\n\\n        // Return full amount to buyer (no platform fee on refund)\\n        usdfc.safeTransfer(escrow.buyer, escrow.amount);\\n\\n        emit EscrowRefunded(escrowId, escrow.buyer, escrow.amount);\\n    }\\n\\n    /**\\n     * @notice Create subscription for recurring payments\\n     * @param provider Service provider address\\n     * @param amountPerPeriod Amount to pay per period\\n     * @param periodDuration Duration of each period in seconds\\n     * @param totalPeriods Total number of periods\\n     * @param datasetId Related dataset ID\\n     * @param accessLevel Access level description\\n     */\\n    function createSubscription(\\n        address provider,\\n        uint256 amountPerPeriod,\\n        uint256 periodDuration,\\n        uint256 totalPeriods,\\n        uint256 datasetId,\\n        string memory accessLevel\\n    ) external nonReentrant whenNotPaused {\\n        require(provider != address(0), \\\"Invalid provider\\\");\\n        require(amountPerPeriod > 0, \\\"Amount must be positive\\\");\\n        require(periodDuration > 0, \\\"Period duration must be positive\\\");\\n        require(totalPeriods > 0, \\\"Total periods must be positive\\\");\\n        require(\\n            periodDuration * totalPeriods <= MAX_SUBSCRIPTION_DURATION,\\n            \\\"Subscription too long\\\"\\n        );\\n\\n        currentSubscriptionId++;\\n        uint256 endTime = block.timestamp + (periodDuration * totalPeriods);\\n        \\n        subscriptions[currentSubscriptionId] = Subscription({\\n            id: currentSubscriptionId,\\n            subscriber: msg.sender,\\n            provider: provider,\\n            amountPerPeriod: amountPerPeriod,\\n            periodDuration: periodDuration,\\n            startTime: block.timestamp,\\n            endTime: endTime,\\n            lastPayment: 0,\\n            status: SubscriptionStatus.ACTIVE,\\n            datasetId: datasetId,\\n            accessLevel: accessLevel\\n        });\\n\\n        userSubscriptions[msg.sender].push(currentSubscriptionId);\\n\\n        emit SubscriptionCreated(\\n            currentSubscriptionId,\\n            msg.sender,\\n            provider,\\n            amountPerPeriod,\\n            endTime\\n        );\\n\\n        // Process first payment\\n        _processSubscriptionPayment(currentSubscriptionId);\\n    }\\n\\n    /**\\n     * @notice Process subscription payment\\n     * @param subscriptionId Subscription ID\\n     */\\n    function processSubscriptionPayment(uint256 subscriptionId) \\n        external \\n        validSubscription(subscriptionId) \\n        nonReentrant \\n        whenNotPaused \\n    {\\n        _processSubscriptionPayment(subscriptionId);\\n    }\\n\\n    /**\\n     * @notice Internal function to process subscription payment\\n     * @param subscriptionId Subscription ID\\n     */\\n    function _processSubscriptionPayment(uint256 subscriptionId) internal {\\n        Subscription storage sub = subscriptions[subscriptionId];\\n        require(sub.status == SubscriptionStatus.ACTIVE, \\\"Subscription not active\\\");\\n        require(block.timestamp < sub.endTime, \\\"Subscription expired\\\");\\n        \\n        uint256 nextPaymentDue = sub.lastPayment + sub.periodDuration;\\n        require(block.timestamp >= nextPaymentDue, \\\"Payment not due yet\\\");\\n\\n        uint256 platformFee = (sub.amountPerPeriod * PLATFORM_FEE) / 10000;\\n        uint256 providerAmount = sub.amountPerPeriod - platformFee;\\n\\n        // Transfer tokens\\n        usdfc.safeTransferFrom(sub.subscriber, treasury, platformFee);\\n        usdfc.safeTransferFrom(sub.subscriber, sub.provider, providerAmount);\\n\\n        sub.lastPayment = block.timestamp;\\n\\n        // Record payment\\n        currentPaymentId++;\\n        payments[currentPaymentId] = PaymentRecord({\\n            id: currentPaymentId,\\n            payer: sub.subscriber,\\n            recipient: sub.provider,\\n            amount: sub.amountPerPeriod,\\n            platformFee: platformFee,\\n            paymentType: PaymentType.SUBSCRIPTION,\\n            timestamp: block.timestamp,\\n            relatedId: subscriptionId,\\n            description: \\\"Subscription payment\\\"\\n        });\\n\\n        uint256 nextDue = sub.lastPayment + sub.periodDuration;\\n        emit SubscriptionPayment(subscriptionId, sub.amountPerPeriod, nextDue);\\n    }\\n\\n    /**\\n     * @notice Cancel subscription\\n     * @param subscriptionId Subscription ID to cancel\\n     */\\n    function cancelSubscription(uint256 subscriptionId) \\n        external \\n        validSubscription(subscriptionId) \\n    {\\n        Subscription storage sub = subscriptions[subscriptionId];\\n        require(\\n            msg.sender == sub.subscriber || \\n            msg.sender == sub.provider || \\n            msg.sender == owner(),\\n            \\\"Not authorized to cancel\\\"\\n        );\\n        require(sub.status == SubscriptionStatus.ACTIVE, \\\"Subscription not active\\\");\\n\\n        sub.status = SubscriptionStatus.CANCELLED;\\n\\n        emit SubscriptionCancelled(subscriptionId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Get user's subscriptions\\n     * @param user User address\\n     * @return Array of subscription IDs\\n     */\\n    function getUserSubscriptions(address user) \\n        external \\n        view \\n        returns (uint256[] memory) \\n    {\\n        return userSubscriptions[user];\\n    }\\n\\n    /**\\n     * @notice Get user's escrows\\n     * @param user User address\\n     * @return Array of escrow IDs\\n     */\\n    function getUserEscrows(address user) \\n        external \\n        view \\n        returns (uint256[] memory) \\n    {\\n        return userEscrows[user];\\n    }\\n\\n    /**\\n     * @notice Check if subscription payment is due\\n     * @param subscriptionId Subscription ID\\n     * @return Whether payment is due\\n     */\\n    function isPaymentDue(uint256 subscriptionId) \\n        external \\n        view \\n        validSubscription(subscriptionId)\\n        returns (bool) \\n    {\\n        Subscription storage sub = subscriptions[subscriptionId];\\n        if (sub.status != SubscriptionStatus.ACTIVE) return false;\\n        if (block.timestamp >= sub.endTime) return false;\\n        \\n        uint256 nextPaymentDue = sub.lastPayment + sub.periodDuration;\\n        return block.timestamp >= nextPaymentDue;\\n    }\\n\\n    /**\\n     * @notice Emergency pause function\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause function\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Update treasury address\\n     * @param newTreasury New treasury address\\n     */\\n    function updateTreasury(address newTreasury) external onlyOwner {\\n        require(newTreasury != address(0), \\\"Invalid address\\\");\\n        treasury = newTreasury;\\n    }\\n\\n    /**\\n     * @notice Emergency withdrawal (admin only)\\n     * @param amount Amount to withdraw\\n     */\\n    function emergencyWithdraw(uint256 amount) external onlyOwner {\\n        usdfc.safeTransfer(owner(), amount);\\n    }\\n} \",\"keccak256\":\"0xfae852befac9949deaa9c187038b83793133e833f75afc707139dc66d4814f02\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523462000064576200001f6200001862000118565b906200025d565b604051612fef6200043b823960805181818161061d01528181611bc901528181611c7c01528181611f2a0152818161224c015281816127c80152612b3f0152612fef90f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b03821117620000a157604052565b62000069565b90620000be620000b660405190565b92836200007f565b565b6001600160a01b031690565b90565b6001600160a01b038116036200006457565b90505190620000be82620000cf565b91906040838203126200006457620000cc906020620001108286620000e1565b9401620000e1565b6200013b6200342a803803806200012f81620000a7565b928339810190620000f0565b9091565b620000c0620000cc620000cc9290565b620000cc906200013f565b156200016257565b60405162461bcd60e51b815260206004820152601560248201527f496e76616c6964205553444643206164647265737300000000000000000000006044820152606490fd5b0390fd5b15620001b357565b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207472656173757279206164647265737300000000000000006044820152606490fd5b620000cc90620000c0906001600160a01b031682565b620000cc90620001f8565b620000cc906200020e565b90610100600160a81b039060081b5b9181191691161790565b9062000251620000cc620002599262000219565b825462000224565b9055565b90620002be620000be926200027233620002c9565b620002b8620002a66200028660006200014f565b620000c06001600160a01b0382166001600160a01b03861614156200015a565b6001600160a01b0385161415620001ab565b62000219565b60805260026200023d565b620000be9062000317565b620000cc620000cc620000cc9290565b620000cc6001620002d4565b906000199062000233565b906200030f620000cc6200025992620002d4565b8254620002f0565b620003229062000338565b620000be62000330620002e4565b6001620002fb565b6200034460006200014f565b6001600160a01b0381166001600160a01b038316146200036a5750620000be90620003e0565b620001a7906200037960405190565b631e4fbdf760e01b8152918291600483016001600160a01b03909116815260200190565b620000cc90620000c0565b620000cc90546200039d565b906001600160a01b039062000233565b90620003d8620000cc620002599262000219565b8254620003b4565b6200040862000401620003f46000620003a8565b620002b8846000620003c4565b9162000219565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06200043460405190565b600090a356fe6080604052600436101561001257600080fd5b60003560e01c8063012f52ee146102225780631006e4cb1461021d57806315ab078f146102185780632123508314610213578063231d99fd1461020e5780632d5bbf60146102095780632e6ca5881461020457806334fbc9a1146101ff578063356f9dfd146101fa5780633f4ba83a146101f55780635312ea8e146101f05780635aa01f58146101eb5780635c975abb146101e65780635ccea85e146101e15780635e48e844146101dc57806361d027b3146101d75780636a44f14a146101d2578063715018a6146101cd57806373ad6c2d146101c85780637580a4ea146101c35780637f51bb1f146101be5780637f944dd0146101b95780638456cb59146101b457806387d81789146101af5780638da5cb5b146101aa57806391002e2e146101a55780639875c69a146101a0578063a23967401461019b578063abc8c7af14610196578063c95d6edc14610191578063e816e87f1461018c578063ed653164146101875763f2fde38b0361022757610f69565b610f51565b610f36565b610f1a565b610ef4565b610ecd565b610ea2565b610e87565b610e60565b610e29565b610d34565b610d18565b610c6e565b610c53565b610c26565b610c0e565b610bf2565b610b6b565b610b1b565b610ab0565b610a7f565b610a64565b610a40565b610a28565b610a10565b6109f5565b6109bc565b610907565b6107a9565b61076f565b61074b565b610604565b610570565b600080fd5b805b0361022757565b905035906102428261022c565b565b906020828203126102275761025891610235565b90565b6102586102586102589290565b906102729061025b565b600052602052604060002090565b6102589081565b6102589054610280565b610258905b73ffffffffffffffffffffffffffffffffffffffff1690565b6102589054610291565b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156102ef575b60208310146102ea57565b6102b9565b91607f16916102df565b8054600093929161031661030c836102cf565b8085529360200190565b9160018116908115610368575060011461032f57505050565b6103429192939450600052602060002090565b916000925b8184106103545750500190565b805484840152602090930192600101610347565b92949550505060ff1916825215156020020190565b90610258916102f9565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176103bf57604052565b610387565b906102426103de926103d560405190565b9384809261037d565b038361039d565b6103f0906006610268565b6103f981610287565b91610406600183016102af565b91610413600282016102af565b9161042060038301610287565b9161042d60048201610287565b9161043a60058301610287565b91610449600682015460ff1690565b91610258600861045b600785016103c4565b9301610287565b9052565b61046290610296565b634e487b7160e01b600052602160045260246000fd5b6005111561048f57565b61046f565b9061024282610485565b61025890610494565b6104629061049e565b60005b8381106104c35750506000910152565b81810151838201526020016104b3565b6104f46104fd602093610507936104e8815190565b80835293849260200190565b958691016104b0565b601f01601f191690565b0190565b908152989796956101208a0195909490939092909160208b0161052d91610466565b60408a0161053a91610466565b6060890152608088015260a087015260c08601610556916104a7565b84810360e0860152610567916104d3565b61010090930152565b34610227576105a761058b610586366004610244565b6103e5565b9561059e99979995919594929460405190565b998a998a61050b565b0390f35b600091031261022757565b6102966102586102589273ffffffffffffffffffffffffffffffffffffffff1690565b610258906105b6565b610258906105d9565b610462906105e2565b60208101929161024291906105eb565b34610227576106143660046105ab565b604051806105a77f0000000000000000000000000000000000000000000000000000000000000000826105f4565b61022e81610296565b9050359061024282610642565b9061024261066560405190565b928361039d565b67ffffffffffffffff81116103bf57602090601f01601f19160190565b90826000939282370152565b909291926106aa6106a58261066c565b610658565b938185528183011161022757610242916020850190610689565b9080601f830112156102275781602061025893359101610695565b9160c083830312610227576106f4828461064b565b926107028360208301610235565b926107108160408401610235565b9261071e8260608501610235565b9261072c8360808301610235565b9260a082013567ffffffffffffffff81116102275761025892016106c4565b346102275761076a61075e3660046106df565b9493909392919261170d565b604051005b346102275761076a610782366004610244565b611938565b610258916008021c81565b906102589154610787565b61025860006004610792565b34610227576107b93660046105ab565b6105a76107c461079d565b6040515b9182918290815260200190565b6107e0906007610268565b6107e981610287565b916107f6600183016102af565b91610803600282016102af565b9161081060038301610287565b9161081d60048201610287565b9161082a60058301610287565b9161083760068201610287565b9161084460078301610287565b91610853600882015460ff1690565b91610258600a61086560098501610287565b93016103c4565b6004111561048f57565b906102428261086c565b61025890610876565b61046290610880565b989694929099979593916101608a019a60008b016108ae919052565b60208a016108bb91610466565b604089016108c891610466565b6060880152608087015260a086015260c085015260e084015261010083016108ef91610889565b610120820152808203906101400152610258916104d3565b34610227576105a761092261091d366004610244565b6107d5565b976109389b999b97919796929695939560405190565b9b8c9b8c610892565b90602082820312610227576102589161064b565b9061097561096e610964845190565b8084529260200190565b9260200190565b9060005b8181106109865750505090565b9091926109a361099c6001928651815260200190565b9460200190565b929101610979565b602080825261025892910190610955565b34610227576105a76109d76109d2366004610941565b6119c6565b604051918291826109ab565b61025860fa61025b565b6102586109e3565b3461022757610a053660046105ab565b6105a76107c46109ed565b346102275761076a610a23366004610244565b611c46565b3461022757610a383660046105ab565b61076a611c62565b346102275761076a610a53366004610244565b611ca9565b61025860006005610792565b3461022757610a743660046105ab565b6105a76107c4610a58565b3461022757610a8f3660046105ab565b6105a7610a9e60025460ff1690565b60405191829182901515815260200190565b34610227576105a76109d7610ac6366004610941565b611cb2565b9060808282031261022757610ae0818361064b565b92610aee8260208501610235565b92610afc8360408301610235565b92606082013567ffffffffffffffff81116102275761025892016106c4565b346102275761076a610b2e366004610acb565b92919091612069565b610258916008021c610296565b906102589154610b37565b61025860016002610b44565b6020810192916102429190610466565b3461022757610b7b3660046105ab565b6105a7610b86610b4f565b60405191829182610b5b565b91909160a08184031261022757610ba9838261064b565b92610bb78160208401610235565b92610bc58260408501610235565b92610bd38360608301610235565b92608082013567ffffffffffffffff81116102275761025892016106c4565b346102275761076a610c05366004610b92565b93929092612391565b3461022757610c1e3660046105ab565b61076a6123bb565b346102275761076a610c39366004610941565b61244b565b6102586301e1338061025b565b610258610c3e565b3461022757610c633660046105ab565b6105a76107c4610c4b565b346102275761076a610c81366004610941565b612513565b919060408382031261022757610258906020610ca2828661064b565b9401610235565b90610272906105e2565b634e487b7160e01b600052603260045260246000fd5b8054821015610cec57610ce3600191600052602060002090565b91020190600090565b610cb3565b610cfc90600a610ca9565b80548210156102275761025891610d1291610cc9565b90610792565b34610227576105a76107c4610d2e366004610c86565b90610cf1565b3461022757610d443660046105ab565b61076a61252f565b610d57906008610268565b610d6081610287565b91610d6d600183016102af565b91610d7a600282016102af565b91610d8760038301610287565b91610d9460048201610287565b91610da3600583015460ff1690565b91610db060068201610287565b91610258600861086560078501610287565b969492909795939161012088019860008901610ddc919052565b60208801610de991610466565b60408701610df691610466565b6060860152608085015260a08401610e0d91610889565b60c083015260e0820152808203906101000152610258916104d3565b34610227576105a7610e44610e3f366004610244565b610d4c565b95610e5799979995919594929460405190565b998a998a610dc2565b3461022757610e703660046105ab565b6105a7610b86612537565b6102586000600b610792565b3461022757610e973660046105ab565b6105a76107c4610e7b565b346102275761076a610eb5366004610244565b61259d565b610258610e1061025b565b610258610eba565b3461022757610edd3660046105ab565b6105a76107c4610ec5565b61025860006003610b44565b3461022757610f043660046105ab565b6105a7610b86610ee8565b610cfc906009610ca9565b34610227576105a76107c4610f30366004610c86565b90610f0f565b34610227576105a7610a9e610f4c366004610244565b612657565b346102275761076a610f64366004610244565b61285e565b346102275761076a610f7c366004610941565b6128da565b90610f979594939291610f926128ed565b610f9f565b610242612946565b906102429594939291610fb0612958565b61151b565b6102966102586102589290565b61025890610fb5565b15610fd257565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c69642070726f7669646572000000000000000000000000000000006044820152606490fd5b0390fd5b1561102257565b60405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606490fd5b1561106e57565b60405162461bcd60e51b815280611017600482016020808252818101527f506572696f64206475726174696f6e206d75737420626520706f736974697665604082015260600190565b156110be57565b60405162461bcd60e51b815260206004820152601e60248201527f546f74616c20706572696f6473206d75737420626520706f73697469766500006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561112c57565b611103565b1561113857565b60405162461bcd60e51b815260206004820152601560248201527f537562736372697074696f6e20746f6f206c6f6e6700000000000000000000006044820152606490fd5b600019811461112c5760010190565b90600019905b9181191691161790565b906111ac6102586111b39261025b565b825461118c565b9055565b9190820180921161112c57565b610258610160610658565b9061046290610296565b9061046290610876565b6102589051610296565b9073ffffffffffffffffffffffffffffffffffffffff90611192565b906112196102586111b3926105e2565b82546111ed565b6102589051610876565b9060ff90611192565b906112436102586111b392610880565b825461122a565b9160001960089290920291821b911b611192565b919061126f6102586111b39361025b565b90835461124a565b6102429160009161125e565b81811061128e575050565b8061129c6000600193611277565b01611283565b9190601f81116112b157505050565b6112c361024293600052602060002090565b906020601f8401819004830193106112e5575b6020601f909101040190611283565b90915081906112d6565b906112f8815190565b9067ffffffffffffffff82116103bf5761131c8261131685546102cf565b856112a2565b602090601f8311600114611357576111b392916000918361134c575b5050600019600883021c1916906002021790565b015190503880611338565b601f1983169161136c85600052602060002090565b9260005b8181106113aa57509160029391856001969410611391575b50505002019055565b01516000196008601f8516021c19169055388080611388565b91936020600181928787015181550195019201611370565b90610242916112ef565b600a6114c5610140610242946113ec6113e6600083015190565b8661119c565b6114046113fb602083016111e3565b60018701611209565b61141c611413604083016111e3565b60028701611209565b61143361142a606083015190565b6003870161119c565b61144a611441608083015190565b6004870161119c565b61146161145860a083015190565b6005870161119c565b61147861146f60c083015190565b6006870161119c565b61148f61148660e083015190565b6007870161119c565b6114a861149f6101008301611220565b60088701611233565b6114c06114b761012083015190565b6009870161119c565b015190565b91016113c2565b90610242916113cc565b90815491680100000000000000008310156103bf57826114fe91600161024295018155610cc9565b9061125e565b9081526040810192916102429160200152565b0152565b939490929460009561152c87610fc2565b61153590610296565b61153e87610296565b141561154990610fcb565b6115528761025b565b851161155d9061101b565b6115668761025b565b841161157190611067565b61157a8761025b565b8111611585906110b7565b61158f8185611119565b611597610c3e565b10156115a290611131565b6115ac6005610287565b6115b59061117d565b6115c090600561119c565b6115ca9084611119565b6115d490426111b7565b956115df6005610287565b936115e86111c4565b946115f39083870152565b61160033602087016111cf565b61160d87604087016111cf565b611618866060870152565b60808501526116284260a0860152565b6116338760c0860152565b61163c8161025b565b60e085015261164f9061010085016111d9565b6101208301526101408201526116656005610287565b611670906007610268565b9061167a916114cc565b611685336009610ca9565b61168f6005610287565b611698916114d6565b6116a26005610287565b6116ab9061025b565b906116b5336105e2565b926116bf906105e2565b936116c960405190565b9182916116d69183611504565b037f11a7acdb40f12388db0682ce7cdb5ffb4d01939a9b0cf653f7c1af7c2f238ad891a46117046005610287565b61024290612a74565b906102429594939291610f81565b1561172257565b60405162461bcd60e51b815260206004820152601760248201527f496e76616c696420737562736372697074696f6e2049440000000000000000006044820152606490fd5b61024290611775600061025b565b81118061178b575b6117869061171b565b61183e565b5061178661179c6102586005610287565b821115905061177d565b156117ad57565b60405162461bcd60e51b815260206004820152601860248201527f4e6f7420617574686f72697a656420746f2063616e63656c00000000000000006044820152606490fd5b156117f957565b60405162461bcd60e51b815260206004820152601760248201527f537562736372697074696f6e206e6f74206163746976650000000000000000006044820152606490fd5b6118be906118b960026008611857610258856007610268565b61186b611866600183016102af565b610296565b61187433610296565b14801561191a575b80156118fa575b61188c906117a6565b016118b461189b825460ff1690565b6118ae6118a86000610876565b91610876565b146117f2565b611233565b61025b565b6118c7336105e2565b907f533734a768f070673b823079652464b7e002bb51cdf15e3108209f397425225f6118f260405190565b80805b0390a3565b5061188c611909611866612537565b61191233610296565b149050611883565b506119296118668483016102af565b61193233610296565b1461187c565b61024290611767565b9061195c611950610964845490565b92600052602060002090565b9060005b81811061196d5750505090565b90919261199161198a60019261198287610287565b815260200190565b9460010190565b929101611960565b9061025891611941565b906102426103de926119b460405190565b93848092611999565b610258906119a3565b6119dd610258916119d5606090565b506009610ca9565b6119bd565b156119e957565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c696420657363726f772049440000000000000000000000000000006044820152606490fd5b61024290611a3c600061025b565b811180611a52575b611a4d906119e2565b611a6d565b50611a4d611a636102586004610287565b8211159050611a44565b610f9790611a796128ed565b611b26565b15611a8557565b60405162461bcd60e51b815260206004820152601160248201527f457363726f77206e6f74206163746976650000000000000000000000000000006044820152606490fd5b15611ad157565b60405162461bcd60e51b815260206004820152601860248201527f4e6f7420617574686f72697a656420746f20726566756e6400000000000000006044820152606490fd5b906112436102586111b39261049e565b611b34610258826006610268565b7feac97bc1917fcedc984e3d0671d4e83b359890323d5d1c2de32b28d17c356ced6118f5611c1c611c16611c10611c0a60068701611b8f611b76825460ff1690565b611b89611b836000610494565b91610494565b14611a7e565b611bc4600360018a0192611ba5611866856102af565b611bae33610296565b148015611c26575b611bbf90611aca565b611b16565b611c057f00000000000000000000000000000000000000000000000000000000000000006003611bf3846102af565b9a0199611bff8b610287565b91612cbd565b6102af565b95610287565b9561025b565b936105e2565b936107c860405190565b50611bbf611c35611866612537565b611c3e33610296565b149050611bb6565b61024290611a2e565b611c57612d05565b610242610242612dc0565b610242611c4f565b61024290611c76612d05565b610242907f0000000000000000000000000000000000000000000000000000000000000000611ca3612537565b90612cbd565b61024290611c6a565b6119dd61025891611cc1606090565b50600a610ca9565b15611cd057565b60405162461bcd60e51b815260206004820152601060248201527f4f6e6c79206d61726b6574706c616365000000000000000000000000000000006044820152606490fd5b90610242939291611d3b611d2c61186660036102af565b611d3533610296565b14611cc9565b90610f97939291611d4a6128ed565b90610242939291611d59612958565b611eb0565b15611d6557565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c696420726563697069656e740000000000000000000000000000006044820152606490fd5b634e487b7160e01b600052601260045260246000fd5b90611dca565b9190565b908115611dd5570490565b611daa565b9190820391821161112c57565b6102589060081c610296565b6102589054611de7565b610258610120610658565b60086114c561010061024294611e226113e6600083015190565b611e316113fb602083016111e3565b611e40611413604083016111e3565b611e4e61142a606083015190565b611e5c611441608083015190565b611e74611e6b60a08301611220565b60058701611233565b611e8261146f60c083015190565b6114c061148660e083015190565b9061024291611e08565b9081526040810192916102429160200190610889565b9161200d90939193611ff4600093611edd611ecd61186687610fc2565b611ed688610296565b1415611d5e565b611ef1611ee98661025b565b885b1161101b565b611fec611f19611f08611f026109e3565b8a611119565b611f1361271061025b565b90611dc0565b93611f65611f27868b611dda565b897f0000000000000000000000000000000000000000000000000000000000000000611f5e89611f576002611df3565b3384612df2565b3390612df2565b611f81611f7a611f75600b610287565b61117d565b600b61119c565b611fcd611f8e600b610287565b95611fa1611f9a611dfd565b978a890152565b611fae33602089016111cf565b611fbb8a604089016111cf565b611fc68b6060890152565b6080870152565b611fda8760a087016111d9565b611fe54260c0870152565b60e0850152565b610100830152565b612008612001600b610287565b6008610268565b611e90565b7f097b91409db74fe0bfb23557dff74ae4ad467118947e27a3ebbafbe29d8dba2b61203b6118b9600b610287565b9161204e612048336105e2565b946105e2565b9461206461205b60405190565b92839283611e9a565b0390a4565b90610242939291611d15565b90610f97949392916120856128ed565b9061024294939291612095612958565b6121e8565b156120a157565b60405162461bcd60e51b815260206004820152600e60248201527f496e76616c69642073656c6c65720000000000000000000000000000000000006044820152606490fd5b156120ed57565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c69642072656c656173652074696d650000000000000000000000006044820152606490fd5b9061046290610494565b6102589051610494565b60086121d7610100610242946121606113e6600083015190565b61216f6113fb602083016111e3565b61217e611413604083016111e3565b61218c61142a606083015190565b61219a611441608083015190565b6121a861145860a083015190565b6121c06121b760c0830161213c565b60068701611b16565b6114c06121ce60e083015190565b600787016113c2565b910161119c565b9061024291612146565b92916122fa61231f92956122f3600061221661220661186683610fc2565b61220f8a610296565b141561209a565b6122286122228261025b565b8a611eeb565b61224661223f610258612239610eba565b426111b7565b86116120e6565b61227c897f0000000000000000000000000000000000000000000000000000000000000000612274306105e2565b903390612df2565b61229361228c611f756004610287565b600461119c565b6122ea6122a06004610287565b956122b36122ac611dfd565b9784890152565b6122c033602089016111cf565b6122cd8a604089016111cf565b6122d88b6060890152565b6122e3426080890152565b60a0870152565b60c08501612132565b60e0830152565b61230683610100830152565b61231a6123136004610287565b6006610268565b6121de565b61234061233061025833600a610ca9565b61233a6004610287565b906114d6565b7f59e4b8728799382406714f1c57de5c893d2772f9a8bf9950c5afe4397e64865461236e6118b96004610287565b9161237b612048336105e2565b9461206461238860405190565b92839283611504565b9061024294939291612075565b6123a6612d05565b6102426102426123b66000610fc2565b612e28565b61024261239e565b610242906123cf612d05565b612420565b156123db57565b60405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61726b6574706c616365206164647265737300000000006044820152606490fd5b610242906124446124346118666000610fc2565b61243d83610296565b14156123d4565b6003611209565b610242906123c3565b61024290612460612d05565b6124e8565b1561246c57565b60405162461bcd60e51b815260206004820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152606490fd5b9074ffffffffffffffffffffffffffffffffffffffff009060081b611192565b906124e16102586111b3926105e2565b82546124b1565b6102429061250c6124fc6118666000610fc2565b61250583610296565b1415612465565b60026124d1565b61024290612454565b612524612d05565b610242610242612eba565b61024261251c565b61025860006102af565b6102429061254f600061025b565b811180612565575b6125609061171b565b612580565b506125606125766102586005610287565b8211159050612557565b610f979061258c6128ed565b61024290612598612958565b611704565b61024290612541565b90610258916125b5600061025b565b8211806125cb575b6125c69061171b565b6125e6565b506125c66125dc6102586005610287565b83111590506125bd565b6125f69161025891506007610268565b600881015460ff1661260b6118a86000610876565b036126515761261f61025860068301610287565b4210156126515761025881612645600461263e600761264b9601610287565b9201610287565b906111b7565b42101590565b50600090565b6102589060006125a6565b61024290612670600061025b565b811180612686575b612681906119e2565b6126a1565b506126816126976102586004610287565b8211159050612678565b610f97906126ad6128ed565b6126fe565b156126b957565b60405162461bcd60e51b815260206004820152601960248201527f4e6f7420617574686f72697a656420746f2072656c65617365000000000000006044820152606490fd5b6002907f6244ed823ca6be0f11bc890c3fafcf3c29cb23420c14243642e930b5e07e6d0a6118f5611c1c611c166128026127bb611c05612742610258896006610268565b61278f600160068301612759611b76825460ff1690565b6127676118668386016102af565b61277033610296565b148015612840575b8015612825575b8015612808575b611bbf906126b2565b6127c0600382016127b3611f086127a583610287565b6127ad6109e3565b90611119565b948591610287565b611dda565b998a916127f77f0000000000000000000000000000000000000000000000000000000000000000956127f184611df3565b87612cbd565b0192611ca3846102af565b9461025b565b50611bbf61281b61025860058701610287565b4210159050612786565b50612831611866612537565b61283a33610296565b1461277f565b5061284f6118668e86016102af565b61285833610296565b14612778565b61024290612662565b61024290612873612d05565b61287d6000610fc2565b61288681610296565b61288f83610296565b1461289e575061024290612e28565b611017906128ab60405190565b9182917f1e4fbdf700000000000000000000000000000000000000000000000000000000835260048301610b5b565b61024290612867565b610258600261025b565b6128f76001610287565b6128ff6128e3565b9081146129115761024290600161119c565b6040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152600490fd5b610258600161025b565b61024261295161293c565b600161119c565b60025460ff1661296457565b6040517fd93c0665000000000000000000000000000000000000000000000000000000008152600490fd5b1561299657565b60405162461bcd60e51b815260206004820152601460248201527f537562736372697074696f6e20657870697265640000000000000000000000006044820152606490fd5b156129e257565b60405162461bcd60e51b815260206004820152601360248201527f5061796d656e74206e6f742064756520796574000000000000000000000000006044820152606490fd5b90612a346106a58361066c565b918252565b612a436014612a27565b7f537562736372697074696f6e207061796d656e74000000000000000000000000602082015290565b610258612a39565b7f554e943290fa0afd2b8471de94af606d97bef9c8db987dd5283385e57a5e5859612c12612c52612c4c612bdb612aaf610258876007610268565b612ac061189b600883015460ff1690565b612ad9612ad261025860068401610287565b421061298f565b612645612c4660078301612c41612aef82610287565b94612b0f612b0761025860048401986126458a610287565b4210156129db565b60038101998a91612c0b612b28611f086127a586610287565b91612c04612b39846127bb88610287565b95612b9f7f0000000000000000000000000000000000000000000000000000000000000000976001850198612b8288612b718c6102af565b612b7b6002611df3565b9084612df2565b6002612b8d8b6102af565b960195612b99876102af565b91612df2565b612ba9428a61119c565b612bb9611f7a611f75600b610287565b612bfb612be1612bdb612bd5612bcf600b610287565b9a6102af565b956102af565b92610287565b93612bf2612bed611dfd565b998a52565b602089016111cf565b604087016111cf565b6060850152565b6080830152565b612c20600160a083016111d9565b612c2b4260c0830152565b612c368c60e0830152565b611ff4611fec612a6c565b610287565b91610287565b9361025b565b92612c5f61238860405190565b0390a2565b612c7d612c776102589263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b91602061024292949361151760408201966000830190610466565b612d00600492612cf161024295612cd763a9059cbb612c64565b92612ce160405190565b9687946020860190815201612ca2565b6020820181038252038361039d565b612ec2565b612d0d612537565b3390612d21612d1b83610296565b91610296565b03612d295750565b61101790612d3660405190565b9182917f118cdaa700000000000000000000000000000000000000000000000000000000835260048301610b5b565b612d6d612f75565b610242612d85565b906112436102586111b392151590565b612d9160006002612d75565b7f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612dbb33610b86565b0390a1565b610242612d65565b6040906115176102429496959396612de860608401986000850190610466565b6020830190610466565b90612d0090612cf161024295600495612e0e6323b872dd612c64565b93612e1860405190565b9788956020870190815201612dc8565b612e4e612e48612e3860006102af565b612e43846000611209565b6105e2565b916105e2565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06118f260405190565b612e81612958565b610242612e9060016002612d75565b7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612dbb33610b86565b610242612e79565b906000602091612ed0600090565b50828151910182855af115612f69573d60005190612ef1611dc6600061025b565b03612f555750612f00816105e2565b3b612f0e611dc6600061025b565b145b612f175750565b612f23611017916105e2565b6040519182917f5274afe700000000000000000000000000000000000000000000000000000000835260048301610b5b565b612f62611dc6600161025b565b1415612f10565b6040513d6000823e3d90fd5b612f88612f8460025460ff1690565b1590565b612f8e57565b6040517f8dfc202b000000000000000000000000000000000000000000000000000000008152600490fdfea2646970667358221220f3f9855cd1cdcba80aaab2fbac12b848ca20d745bf6f7c5d74e9a9d540dee6d864736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063012f52ee146102225780631006e4cb1461021d57806315ab078f146102185780632123508314610213578063231d99fd1461020e5780632d5bbf60146102095780632e6ca5881461020457806334fbc9a1146101ff578063356f9dfd146101fa5780633f4ba83a146101f55780635312ea8e146101f05780635aa01f58146101eb5780635c975abb146101e65780635ccea85e146101e15780635e48e844146101dc57806361d027b3146101d75780636a44f14a146101d2578063715018a6146101cd57806373ad6c2d146101c85780637580a4ea146101c35780637f51bb1f146101be5780637f944dd0146101b95780638456cb59146101b457806387d81789146101af5780638da5cb5b146101aa57806391002e2e146101a55780639875c69a146101a0578063a23967401461019b578063abc8c7af14610196578063c95d6edc14610191578063e816e87f1461018c578063ed653164146101875763f2fde38b0361022757610f69565b610f51565b610f36565b610f1a565b610ef4565b610ecd565b610ea2565b610e87565b610e60565b610e29565b610d34565b610d18565b610c6e565b610c53565b610c26565b610c0e565b610bf2565b610b6b565b610b1b565b610ab0565b610a7f565b610a64565b610a40565b610a28565b610a10565b6109f5565b6109bc565b610907565b6107a9565b61076f565b61074b565b610604565b610570565b600080fd5b805b0361022757565b905035906102428261022c565b565b906020828203126102275761025891610235565b90565b6102586102586102589290565b906102729061025b565b600052602052604060002090565b6102589081565b6102589054610280565b610258905b73ffffffffffffffffffffffffffffffffffffffff1690565b6102589054610291565b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156102ef575b60208310146102ea57565b6102b9565b91607f16916102df565b8054600093929161031661030c836102cf565b8085529360200190565b9160018116908115610368575060011461032f57505050565b6103429192939450600052602060002090565b916000925b8184106103545750500190565b805484840152602090930192600101610347565b92949550505060ff1916825215156020020190565b90610258916102f9565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176103bf57604052565b610387565b906102426103de926103d560405190565b9384809261037d565b038361039d565b6103f0906006610268565b6103f981610287565b91610406600183016102af565b91610413600282016102af565b9161042060038301610287565b9161042d60048201610287565b9161043a60058301610287565b91610449600682015460ff1690565b91610258600861045b600785016103c4565b9301610287565b9052565b61046290610296565b634e487b7160e01b600052602160045260246000fd5b6005111561048f57565b61046f565b9061024282610485565b61025890610494565b6104629061049e565b60005b8381106104c35750506000910152565b81810151838201526020016104b3565b6104f46104fd602093610507936104e8815190565b80835293849260200190565b958691016104b0565b601f01601f191690565b0190565b908152989796956101208a0195909490939092909160208b0161052d91610466565b60408a0161053a91610466565b6060890152608088015260a087015260c08601610556916104a7565b84810360e0860152610567916104d3565b61010090930152565b34610227576105a761058b610586366004610244565b6103e5565b9561059e99979995919594929460405190565b998a998a61050b565b0390f35b600091031261022757565b6102966102586102589273ffffffffffffffffffffffffffffffffffffffff1690565b610258906105b6565b610258906105d9565b610462906105e2565b60208101929161024291906105eb565b34610227576106143660046105ab565b604051806105a77f0000000000000000000000000000000000000000000000000000000000000000826105f4565b61022e81610296565b9050359061024282610642565b9061024261066560405190565b928361039d565b67ffffffffffffffff81116103bf57602090601f01601f19160190565b90826000939282370152565b909291926106aa6106a58261066c565b610658565b938185528183011161022757610242916020850190610689565b9080601f830112156102275781602061025893359101610695565b9160c083830312610227576106f4828461064b565b926107028360208301610235565b926107108160408401610235565b9261071e8260608501610235565b9261072c8360808301610235565b9260a082013567ffffffffffffffff81116102275761025892016106c4565b346102275761076a61075e3660046106df565b9493909392919261170d565b604051005b346102275761076a610782366004610244565b611938565b610258916008021c81565b906102589154610787565b61025860006004610792565b34610227576107b93660046105ab565b6105a76107c461079d565b6040515b9182918290815260200190565b6107e0906007610268565b6107e981610287565b916107f6600183016102af565b91610803600282016102af565b9161081060038301610287565b9161081d60048201610287565b9161082a60058301610287565b9161083760068201610287565b9161084460078301610287565b91610853600882015460ff1690565b91610258600a61086560098501610287565b93016103c4565b6004111561048f57565b906102428261086c565b61025890610876565b61046290610880565b989694929099979593916101608a019a60008b016108ae919052565b60208a016108bb91610466565b604089016108c891610466565b6060880152608087015260a086015260c085015260e084015261010083016108ef91610889565b610120820152808203906101400152610258916104d3565b34610227576105a761092261091d366004610244565b6107d5565b976109389b999b97919796929695939560405190565b9b8c9b8c610892565b90602082820312610227576102589161064b565b9061097561096e610964845190565b8084529260200190565b9260200190565b9060005b8181106109865750505090565b9091926109a361099c6001928651815260200190565b9460200190565b929101610979565b602080825261025892910190610955565b34610227576105a76109d76109d2366004610941565b6119c6565b604051918291826109ab565b61025860fa61025b565b6102586109e3565b3461022757610a053660046105ab565b6105a76107c46109ed565b346102275761076a610a23366004610244565b611c46565b3461022757610a383660046105ab565b61076a611c62565b346102275761076a610a53366004610244565b611ca9565b61025860006005610792565b3461022757610a743660046105ab565b6105a76107c4610a58565b3461022757610a8f3660046105ab565b6105a7610a9e60025460ff1690565b60405191829182901515815260200190565b34610227576105a76109d7610ac6366004610941565b611cb2565b9060808282031261022757610ae0818361064b565b92610aee8260208501610235565b92610afc8360408301610235565b92606082013567ffffffffffffffff81116102275761025892016106c4565b346102275761076a610b2e366004610acb565b92919091612069565b610258916008021c610296565b906102589154610b37565b61025860016002610b44565b6020810192916102429190610466565b3461022757610b7b3660046105ab565b6105a7610b86610b4f565b60405191829182610b5b565b91909160a08184031261022757610ba9838261064b565b92610bb78160208401610235565b92610bc58260408501610235565b92610bd38360608301610235565b92608082013567ffffffffffffffff81116102275761025892016106c4565b346102275761076a610c05366004610b92565b93929092612391565b3461022757610c1e3660046105ab565b61076a6123bb565b346102275761076a610c39366004610941565b61244b565b6102586301e1338061025b565b610258610c3e565b3461022757610c633660046105ab565b6105a76107c4610c4b565b346102275761076a610c81366004610941565b612513565b919060408382031261022757610258906020610ca2828661064b565b9401610235565b90610272906105e2565b634e487b7160e01b600052603260045260246000fd5b8054821015610cec57610ce3600191600052602060002090565b91020190600090565b610cb3565b610cfc90600a610ca9565b80548210156102275761025891610d1291610cc9565b90610792565b34610227576105a76107c4610d2e366004610c86565b90610cf1565b3461022757610d443660046105ab565b61076a61252f565b610d57906008610268565b610d6081610287565b91610d6d600183016102af565b91610d7a600282016102af565b91610d8760038301610287565b91610d9460048201610287565b91610da3600583015460ff1690565b91610db060068201610287565b91610258600861086560078501610287565b969492909795939161012088019860008901610ddc919052565b60208801610de991610466565b60408701610df691610466565b6060860152608085015260a08401610e0d91610889565b60c083015260e0820152808203906101000152610258916104d3565b34610227576105a7610e44610e3f366004610244565b610d4c565b95610e5799979995919594929460405190565b998a998a610dc2565b3461022757610e703660046105ab565b6105a7610b86612537565b6102586000600b610792565b3461022757610e973660046105ab565b6105a76107c4610e7b565b346102275761076a610eb5366004610244565b61259d565b610258610e1061025b565b610258610eba565b3461022757610edd3660046105ab565b6105a76107c4610ec5565b61025860006003610b44565b3461022757610f043660046105ab565b6105a7610b86610ee8565b610cfc906009610ca9565b34610227576105a76107c4610f30366004610c86565b90610f0f565b34610227576105a7610a9e610f4c366004610244565b612657565b346102275761076a610f64366004610244565b61285e565b346102275761076a610f7c366004610941565b6128da565b90610f979594939291610f926128ed565b610f9f565b610242612946565b906102429594939291610fb0612958565b61151b565b6102966102586102589290565b61025890610fb5565b15610fd257565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c69642070726f7669646572000000000000000000000000000000006044820152606490fd5b0390fd5b1561102257565b60405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606490fd5b1561106e57565b60405162461bcd60e51b815280611017600482016020808252818101527f506572696f64206475726174696f6e206d75737420626520706f736974697665604082015260600190565b156110be57565b60405162461bcd60e51b815260206004820152601e60248201527f546f74616c20706572696f6473206d75737420626520706f73697469766500006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561112c57565b611103565b1561113857565b60405162461bcd60e51b815260206004820152601560248201527f537562736372697074696f6e20746f6f206c6f6e6700000000000000000000006044820152606490fd5b600019811461112c5760010190565b90600019905b9181191691161790565b906111ac6102586111b39261025b565b825461118c565b9055565b9190820180921161112c57565b610258610160610658565b9061046290610296565b9061046290610876565b6102589051610296565b9073ffffffffffffffffffffffffffffffffffffffff90611192565b906112196102586111b3926105e2565b82546111ed565b6102589051610876565b9060ff90611192565b906112436102586111b392610880565b825461122a565b9160001960089290920291821b911b611192565b919061126f6102586111b39361025b565b90835461124a565b6102429160009161125e565b81811061128e575050565b8061129c6000600193611277565b01611283565b9190601f81116112b157505050565b6112c361024293600052602060002090565b906020601f8401819004830193106112e5575b6020601f909101040190611283565b90915081906112d6565b906112f8815190565b9067ffffffffffffffff82116103bf5761131c8261131685546102cf565b856112a2565b602090601f8311600114611357576111b392916000918361134c575b5050600019600883021c1916906002021790565b015190503880611338565b601f1983169161136c85600052602060002090565b9260005b8181106113aa57509160029391856001969410611391575b50505002019055565b01516000196008601f8516021c19169055388080611388565b91936020600181928787015181550195019201611370565b90610242916112ef565b600a6114c5610140610242946113ec6113e6600083015190565b8661119c565b6114046113fb602083016111e3565b60018701611209565b61141c611413604083016111e3565b60028701611209565b61143361142a606083015190565b6003870161119c565b61144a611441608083015190565b6004870161119c565b61146161145860a083015190565b6005870161119c565b61147861146f60c083015190565b6006870161119c565b61148f61148660e083015190565b6007870161119c565b6114a861149f6101008301611220565b60088701611233565b6114c06114b761012083015190565b6009870161119c565b015190565b91016113c2565b90610242916113cc565b90815491680100000000000000008310156103bf57826114fe91600161024295018155610cc9565b9061125e565b9081526040810192916102429160200152565b0152565b939490929460009561152c87610fc2565b61153590610296565b61153e87610296565b141561154990610fcb565b6115528761025b565b851161155d9061101b565b6115668761025b565b841161157190611067565b61157a8761025b565b8111611585906110b7565b61158f8185611119565b611597610c3e565b10156115a290611131565b6115ac6005610287565b6115b59061117d565b6115c090600561119c565b6115ca9084611119565b6115d490426111b7565b956115df6005610287565b936115e86111c4565b946115f39083870152565b61160033602087016111cf565b61160d87604087016111cf565b611618866060870152565b60808501526116284260a0860152565b6116338760c0860152565b61163c8161025b565b60e085015261164f9061010085016111d9565b6101208301526101408201526116656005610287565b611670906007610268565b9061167a916114cc565b611685336009610ca9565b61168f6005610287565b611698916114d6565b6116a26005610287565b6116ab9061025b565b906116b5336105e2565b926116bf906105e2565b936116c960405190565b9182916116d69183611504565b037f11a7acdb40f12388db0682ce7cdb5ffb4d01939a9b0cf653f7c1af7c2f238ad891a46117046005610287565b61024290612a74565b906102429594939291610f81565b1561172257565b60405162461bcd60e51b815260206004820152601760248201527f496e76616c696420737562736372697074696f6e2049440000000000000000006044820152606490fd5b61024290611775600061025b565b81118061178b575b6117869061171b565b61183e565b5061178661179c6102586005610287565b821115905061177d565b156117ad57565b60405162461bcd60e51b815260206004820152601860248201527f4e6f7420617574686f72697a656420746f2063616e63656c00000000000000006044820152606490fd5b156117f957565b60405162461bcd60e51b815260206004820152601760248201527f537562736372697074696f6e206e6f74206163746976650000000000000000006044820152606490fd5b6118be906118b960026008611857610258856007610268565b61186b611866600183016102af565b610296565b61187433610296565b14801561191a575b80156118fa575b61188c906117a6565b016118b461189b825460ff1690565b6118ae6118a86000610876565b91610876565b146117f2565b611233565b61025b565b6118c7336105e2565b907f533734a768f070673b823079652464b7e002bb51cdf15e3108209f397425225f6118f260405190565b80805b0390a3565b5061188c611909611866612537565b61191233610296565b149050611883565b506119296118668483016102af565b61193233610296565b1461187c565b61024290611767565b9061195c611950610964845490565b92600052602060002090565b9060005b81811061196d5750505090565b90919261199161198a60019261198287610287565b815260200190565b9460010190565b929101611960565b9061025891611941565b906102426103de926119b460405190565b93848092611999565b610258906119a3565b6119dd610258916119d5606090565b506009610ca9565b6119bd565b156119e957565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c696420657363726f772049440000000000000000000000000000006044820152606490fd5b61024290611a3c600061025b565b811180611a52575b611a4d906119e2565b611a6d565b50611a4d611a636102586004610287565b8211159050611a44565b610f9790611a796128ed565b611b26565b15611a8557565b60405162461bcd60e51b815260206004820152601160248201527f457363726f77206e6f74206163746976650000000000000000000000000000006044820152606490fd5b15611ad157565b60405162461bcd60e51b815260206004820152601860248201527f4e6f7420617574686f72697a656420746f20726566756e6400000000000000006044820152606490fd5b906112436102586111b39261049e565b611b34610258826006610268565b7feac97bc1917fcedc984e3d0671d4e83b359890323d5d1c2de32b28d17c356ced6118f5611c1c611c16611c10611c0a60068701611b8f611b76825460ff1690565b611b89611b836000610494565b91610494565b14611a7e565b611bc4600360018a0192611ba5611866856102af565b611bae33610296565b148015611c26575b611bbf90611aca565b611b16565b611c057f00000000000000000000000000000000000000000000000000000000000000006003611bf3846102af565b9a0199611bff8b610287565b91612cbd565b6102af565b95610287565b9561025b565b936105e2565b936107c860405190565b50611bbf611c35611866612537565b611c3e33610296565b149050611bb6565b61024290611a2e565b611c57612d05565b610242610242612dc0565b610242611c4f565b61024290611c76612d05565b610242907f0000000000000000000000000000000000000000000000000000000000000000611ca3612537565b90612cbd565b61024290611c6a565b6119dd61025891611cc1606090565b50600a610ca9565b15611cd057565b60405162461bcd60e51b815260206004820152601060248201527f4f6e6c79206d61726b6574706c616365000000000000000000000000000000006044820152606490fd5b90610242939291611d3b611d2c61186660036102af565b611d3533610296565b14611cc9565b90610f97939291611d4a6128ed565b90610242939291611d59612958565b611eb0565b15611d6557565b60405162461bcd60e51b815260206004820152601160248201527f496e76616c696420726563697069656e740000000000000000000000000000006044820152606490fd5b634e487b7160e01b600052601260045260246000fd5b90611dca565b9190565b908115611dd5570490565b611daa565b9190820391821161112c57565b6102589060081c610296565b6102589054611de7565b610258610120610658565b60086114c561010061024294611e226113e6600083015190565b611e316113fb602083016111e3565b611e40611413604083016111e3565b611e4e61142a606083015190565b611e5c611441608083015190565b611e74611e6b60a08301611220565b60058701611233565b611e8261146f60c083015190565b6114c061148660e083015190565b9061024291611e08565b9081526040810192916102429160200190610889565b9161200d90939193611ff4600093611edd611ecd61186687610fc2565b611ed688610296565b1415611d5e565b611ef1611ee98661025b565b885b1161101b565b611fec611f19611f08611f026109e3565b8a611119565b611f1361271061025b565b90611dc0565b93611f65611f27868b611dda565b897f0000000000000000000000000000000000000000000000000000000000000000611f5e89611f576002611df3565b3384612df2565b3390612df2565b611f81611f7a611f75600b610287565b61117d565b600b61119c565b611fcd611f8e600b610287565b95611fa1611f9a611dfd565b978a890152565b611fae33602089016111cf565b611fbb8a604089016111cf565b611fc68b6060890152565b6080870152565b611fda8760a087016111d9565b611fe54260c0870152565b60e0850152565b610100830152565b612008612001600b610287565b6008610268565b611e90565b7f097b91409db74fe0bfb23557dff74ae4ad467118947e27a3ebbafbe29d8dba2b61203b6118b9600b610287565b9161204e612048336105e2565b946105e2565b9461206461205b60405190565b92839283611e9a565b0390a4565b90610242939291611d15565b90610f97949392916120856128ed565b9061024294939291612095612958565b6121e8565b156120a157565b60405162461bcd60e51b815260206004820152600e60248201527f496e76616c69642073656c6c65720000000000000000000000000000000000006044820152606490fd5b156120ed57565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c69642072656c656173652074696d650000000000000000000000006044820152606490fd5b9061046290610494565b6102589051610494565b60086121d7610100610242946121606113e6600083015190565b61216f6113fb602083016111e3565b61217e611413604083016111e3565b61218c61142a606083015190565b61219a611441608083015190565b6121a861145860a083015190565b6121c06121b760c0830161213c565b60068701611b16565b6114c06121ce60e083015190565b600787016113c2565b910161119c565b9061024291612146565b92916122fa61231f92956122f3600061221661220661186683610fc2565b61220f8a610296565b141561209a565b6122286122228261025b565b8a611eeb565b61224661223f610258612239610eba565b426111b7565b86116120e6565b61227c897f0000000000000000000000000000000000000000000000000000000000000000612274306105e2565b903390612df2565b61229361228c611f756004610287565b600461119c565b6122ea6122a06004610287565b956122b36122ac611dfd565b9784890152565b6122c033602089016111cf565b6122cd8a604089016111cf565b6122d88b6060890152565b6122e3426080890152565b60a0870152565b60c08501612132565b60e0830152565b61230683610100830152565b61231a6123136004610287565b6006610268565b6121de565b61234061233061025833600a610ca9565b61233a6004610287565b906114d6565b7f59e4b8728799382406714f1c57de5c893d2772f9a8bf9950c5afe4397e64865461236e6118b96004610287565b9161237b612048336105e2565b9461206461238860405190565b92839283611504565b9061024294939291612075565b6123a6612d05565b6102426102426123b66000610fc2565b612e28565b61024261239e565b610242906123cf612d05565b612420565b156123db57565b60405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206d61726b6574706c616365206164647265737300000000006044820152606490fd5b610242906124446124346118666000610fc2565b61243d83610296565b14156123d4565b6003611209565b610242906123c3565b61024290612460612d05565b6124e8565b1561246c57565b60405162461bcd60e51b815260206004820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152606490fd5b9074ffffffffffffffffffffffffffffffffffffffff009060081b611192565b906124e16102586111b3926105e2565b82546124b1565b6102429061250c6124fc6118666000610fc2565b61250583610296565b1415612465565b60026124d1565b61024290612454565b612524612d05565b610242610242612eba565b61024261251c565b61025860006102af565b6102429061254f600061025b565b811180612565575b6125609061171b565b612580565b506125606125766102586005610287565b8211159050612557565b610f979061258c6128ed565b61024290612598612958565b611704565b61024290612541565b90610258916125b5600061025b565b8211806125cb575b6125c69061171b565b6125e6565b506125c66125dc6102586005610287565b83111590506125bd565b6125f69161025891506007610268565b600881015460ff1661260b6118a86000610876565b036126515761261f61025860068301610287565b4210156126515761025881612645600461263e600761264b9601610287565b9201610287565b906111b7565b42101590565b50600090565b6102589060006125a6565b61024290612670600061025b565b811180612686575b612681906119e2565b6126a1565b506126816126976102586004610287565b8211159050612678565b610f97906126ad6128ed565b6126fe565b156126b957565b60405162461bcd60e51b815260206004820152601960248201527f4e6f7420617574686f72697a656420746f2072656c65617365000000000000006044820152606490fd5b6002907f6244ed823ca6be0f11bc890c3fafcf3c29cb23420c14243642e930b5e07e6d0a6118f5611c1c611c166128026127bb611c05612742610258896006610268565b61278f600160068301612759611b76825460ff1690565b6127676118668386016102af565b61277033610296565b148015612840575b8015612825575b8015612808575b611bbf906126b2565b6127c0600382016127b3611f086127a583610287565b6127ad6109e3565b90611119565b948591610287565b611dda565b998a916127f77f0000000000000000000000000000000000000000000000000000000000000000956127f184611df3565b87612cbd565b0192611ca3846102af565b9461025b565b50611bbf61281b61025860058701610287565b4210159050612786565b50612831611866612537565b61283a33610296565b1461277f565b5061284f6118668e86016102af565b61285833610296565b14612778565b61024290612662565b61024290612873612d05565b61287d6000610fc2565b61288681610296565b61288f83610296565b1461289e575061024290612e28565b611017906128ab60405190565b9182917f1e4fbdf700000000000000000000000000000000000000000000000000000000835260048301610b5b565b61024290612867565b610258600261025b565b6128f76001610287565b6128ff6128e3565b9081146129115761024290600161119c565b6040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152600490fd5b610258600161025b565b61024261295161293c565b600161119c565b60025460ff1661296457565b6040517fd93c0665000000000000000000000000000000000000000000000000000000008152600490fd5b1561299657565b60405162461bcd60e51b815260206004820152601460248201527f537562736372697074696f6e20657870697265640000000000000000000000006044820152606490fd5b156129e257565b60405162461bcd60e51b815260206004820152601360248201527f5061796d656e74206e6f742064756520796574000000000000000000000000006044820152606490fd5b90612a346106a58361066c565b918252565b612a436014612a27565b7f537562736372697074696f6e207061796d656e74000000000000000000000000602082015290565b610258612a39565b7f554e943290fa0afd2b8471de94af606d97bef9c8db987dd5283385e57a5e5859612c12612c52612c4c612bdb612aaf610258876007610268565b612ac061189b600883015460ff1690565b612ad9612ad261025860068401610287565b421061298f565b612645612c4660078301612c41612aef82610287565b94612b0f612b0761025860048401986126458a610287565b4210156129db565b60038101998a91612c0b612b28611f086127a586610287565b91612c04612b39846127bb88610287565b95612b9f7f0000000000000000000000000000000000000000000000000000000000000000976001850198612b8288612b718c6102af565b612b7b6002611df3565b9084612df2565b6002612b8d8b6102af565b960195612b99876102af565b91612df2565b612ba9428a61119c565b612bb9611f7a611f75600b610287565b612bfb612be1612bdb612bd5612bcf600b610287565b9a6102af565b956102af565b92610287565b93612bf2612bed611dfd565b998a52565b602089016111cf565b604087016111cf565b6060850152565b6080830152565b612c20600160a083016111d9565b612c2b4260c0830152565b612c368c60e0830152565b611ff4611fec612a6c565b610287565b91610287565b9361025b565b92612c5f61238860405190565b0390a2565b612c7d612c776102589263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b91602061024292949361151760408201966000830190610466565b612d00600492612cf161024295612cd763a9059cbb612c64565b92612ce160405190565b9687946020860190815201612ca2565b6020820181038252038361039d565b612ec2565b612d0d612537565b3390612d21612d1b83610296565b91610296565b03612d295750565b61101790612d3660405190565b9182917f118cdaa700000000000000000000000000000000000000000000000000000000835260048301610b5b565b612d6d612f75565b610242612d85565b906112436102586111b392151590565b612d9160006002612d75565b7f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612dbb33610b86565b0390a1565b610242612d65565b6040906115176102429496959396612de860608401986000850190610466565b6020830190610466565b90612d0090612cf161024295600495612e0e6323b872dd612c64565b93612e1860405190565b9788956020870190815201612dc8565b612e4e612e48612e3860006102af565b612e43846000611209565b6105e2565b916105e2565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06118f260405190565b612e81612958565b610242612e9060016002612d75565b7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612dbb33610b86565b610242612e79565b906000602091612ed0600090565b50828151910182855af115612f69573d60005190612ef1611dc6600061025b565b03612f555750612f00816105e2565b3b612f0e611dc6600061025b565b145b612f175750565b612f23611017916105e2565b6040519182917f5274afe700000000000000000000000000000000000000000000000000000000835260048301610b5b565b612f62611dc6600161025b565b1415612f10565b6040513d6000823e3d90fd5b612f88612f8460025460ff1690565b1590565b612f8e57565b6040517f8dfc202b000000000000000000000000000000000000000000000000000000008152600490fdfea2646970667358221220f3f9855cd1cdcba80aaab2fbac12b848ca20d745bf6f7c5d74e9a9d540dee6d864736f6c63430008180033",
  "devdoc": {
    "details": "USDFC payment processor with escrow and subscription management",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "cancelSubscription(uint256)": {
        "params": {
          "subscriptionId": "Subscription ID to cancel"
        }
      },
      "constructor": {
        "details": "Constructor",
        "params": {
          "_treasury": "Platform treasury address",
          "_usdfc": "USDFC token contract address"
        }
      },
      "createEscrow(address,uint256,uint256,uint256,string)": {
        "params": {
          "amount": "Escrow amount",
          "datasetId": "Related dataset ID",
          "description": "Escrow description",
          "releaseTime": "When funds can be released",
          "seller": "Seller address"
        }
      },
      "createSubscription(address,uint256,uint256,uint256,uint256,string)": {
        "params": {
          "accessLevel": "Access level description",
          "amountPerPeriod": "Amount to pay per period",
          "datasetId": "Related dataset ID",
          "periodDuration": "Duration of each period in seconds",
          "provider": "Service provider address",
          "totalPeriods": "Total number of periods"
        }
      },
      "emergencyWithdraw(uint256)": {
        "params": {
          "amount": "Amount to withdraw"
        }
      },
      "getUserEscrows(address)": {
        "params": {
          "user": "User address"
        },
        "returns": {
          "_0": "Array of escrow IDs"
        }
      },
      "getUserSubscriptions(address)": {
        "params": {
          "user": "User address"
        },
        "returns": {
          "_0": "Array of subscription IDs"
        }
      },
      "isPaymentDue(uint256)": {
        "params": {
          "subscriptionId": "Subscription ID"
        },
        "returns": {
          "_0": "Whether payment is due"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "processPayment(address,uint256,uint256,string)": {
        "params": {
          "amount": "Payment amount",
          "datasetId": "Related dataset ID",
          "description": "Payment description",
          "recipient": "Payment recipient"
        }
      },
      "processSubscriptionPayment(uint256)": {
        "params": {
          "subscriptionId": "Subscription ID"
        }
      },
      "refundEscrow(uint256)": {
        "params": {
          "escrowId": "Escrow ID to refund"
        }
      },
      "releaseEscrow(uint256)": {
        "params": {
          "escrowId": "Escrow ID to release"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setMarketplace(address)": {
        "params": {
          "_marketplace": "Marketplace contract address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateTreasury(address)": {
        "params": {
          "newTreasury": "New treasury address"
        }
      }
    },
    "title": "VerifiAIPayments",
    "version": 1
  },
  "userdoc": {
    "events": {
      "EscrowCreated(uint256,address,address,uint256,uint256)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "MAX_SUBSCRIPTION_DURATION()": {
        "notice": "Maximum subscription duration (1 year)"
      },
      "MIN_ESCROW_DURATION()": {
        "notice": "Minimum escrow duration (1 hour)"
      },
      "PLATFORM_FEE()": {
        "notice": "Platform fee in basis points (100 = 1%)"
      },
      "cancelSubscription(uint256)": {
        "notice": "Cancel subscription"
      },
      "createEscrow(address,uint256,uint256,uint256,string)": {
        "notice": "Create escrow for secure transactions"
      },
      "createSubscription(address,uint256,uint256,uint256,uint256,string)": {
        "notice": "Create subscription for recurring payments"
      },
      "currentEscrowId()": {
        "notice": "Current escrow ID counter"
      },
      "currentPaymentId()": {
        "notice": "Current payment ID counter"
      },
      "currentSubscriptionId()": {
        "notice": "Current subscription ID counter"
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Emergency withdrawal (admin only)"
      },
      "escrows(uint256)": {
        "notice": "Mapping of escrow ID to escrow details"
      },
      "getUserEscrows(address)": {
        "notice": "Get user's escrows"
      },
      "getUserSubscriptions(address)": {
        "notice": "Get user's subscriptions"
      },
      "isPaymentDue(uint256)": {
        "notice": "Check if subscription payment is due"
      },
      "marketplace()": {
        "notice": "VerifiAI marketplace contract address"
      },
      "pause()": {
        "notice": "Emergency pause function"
      },
      "payments(uint256)": {
        "notice": "Mapping of payment ID to payment record"
      },
      "processPayment(address,uint256,uint256,string)": {
        "notice": "Process one-time payment"
      },
      "processSubscriptionPayment(uint256)": {
        "notice": "Process subscription payment"
      },
      "refundEscrow(uint256)": {
        "notice": "Refund escrow to buyer (only before release time or by admin)"
      },
      "releaseEscrow(uint256)": {
        "notice": "Release escrow funds to seller"
      },
      "setMarketplace(address)": {
        "notice": "Set marketplace contract address (admin only)"
      },
      "subscriptions(uint256)": {
        "notice": "Mapping of subscription ID to subscription details"
      },
      "treasury()": {
        "notice": "Platform treasury address"
      },
      "unpause()": {
        "notice": "Unpause function"
      },
      "updateTreasury(address)": {
        "notice": "Update treasury address"
      },
      "usdfc()": {
        "notice": "USDFC stablecoin contract"
      },
      "userEscrows(address,uint256)": {
        "notice": "Mapping of user to their escrow IDs (as buyer)"
      },
      "userSubscriptions(address,uint256)": {
        "notice": "Mapping of user to their subscription IDs"
      }
    },
    "notice": "Handles all payment operations for the VerifiAI marketplace",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1068,
        "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3910,
        "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3800,
        "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 17984,
        "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
        "label": "treasury",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 17987,
        "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
        "label": "marketplace",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 17990,
        "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
        "label": "currentEscrowId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 17993,
        "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
        "label": "currentSubscriptionId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 18085,
        "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
        "label": "escrows",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(EscrowDetails)18033_storage)"
      },
      {
        "astId": 18091,
        "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
        "label": "subscriptions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Subscription)18058_storage)"
      },
      {
        "astId": 18097,
        "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
        "label": "payments",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(PaymentRecord)18079_storage)"
      },
      {
        "astId": 18103,
        "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
        "label": "userSubscriptions",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 18109,
        "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
        "label": "userEscrows",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 18112,
        "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
        "label": "currentPaymentId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(EscrowStatus)18006": {
        "encoding": "inplace",
        "label": "enum VerifiAIPayments.EscrowStatus",
        "numberOfBytes": "1"
      },
      "t_enum(PaymentType)17999": {
        "encoding": "inplace",
        "label": "enum VerifiAIPayments.PaymentType",
        "numberOfBytes": "1"
      },
      "t_enum(SubscriptionStatus)18012": {
        "encoding": "inplace",
        "label": "enum VerifiAIPayments.SubscriptionStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(EscrowDetails)18033_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VerifiAIPayments.EscrowDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(EscrowDetails)18033_storage"
      },
      "t_mapping(t_uint256,t_struct(PaymentRecord)18079_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VerifiAIPayments.PaymentRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(PaymentRecord)18079_storage"
      },
      "t_mapping(t_uint256,t_struct(Subscription)18058_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VerifiAIPayments.Subscription)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscription)18058_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(EscrowDetails)18033_storage": {
        "encoding": "inplace",
        "label": "struct VerifiAIPayments.EscrowDetails",
        "members": [
          {
            "astId": 18015,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18017,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "buyer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18019,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "seller",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 18021,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18023,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "createdAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18025,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "releaseTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 18028,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(EscrowStatus)18006"
          },
          {
            "astId": 18030,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "description",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 18032,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "datasetId",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(PaymentRecord)18079_storage": {
        "encoding": "inplace",
        "label": "struct VerifiAIPayments.PaymentRecord",
        "members": [
          {
            "astId": 18061,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18063,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "payer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18065,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "recipient",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 18067,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18069,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "platformFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18072,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "paymentType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(PaymentType)17999"
          },
          {
            "astId": 18074,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "timestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 18076,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "relatedId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 18078,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "description",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Subscription)18058_storage": {
        "encoding": "inplace",
        "label": "struct VerifiAIPayments.Subscription",
        "members": [
          {
            "astId": 18036,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18038,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "subscriber",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18040,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "provider",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 18042,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "amountPerPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18044,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "periodDuration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18046,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "startTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 18048,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "endTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 18050,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "lastPayment",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 18053,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "status",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(SubscriptionStatus)18012"
          },
          {
            "astId": 18055,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "datasetId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 18057,
            "contract": "contracts/VerifiAIPayments.sol:VerifiAIPayments",
            "label": "accessLevel",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}