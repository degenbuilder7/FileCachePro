{
  "address": "0xA4643b8582C4751457030b3c980B2aACcA660CC5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_tellor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdfc",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "ChallengeResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "trainingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        }
      ],
      "name": "ChallengeSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "trainingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "queryId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "queryType",
          "type": "string"
        }
      ],
      "name": "TellorQuerySubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "trainingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trainer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "datasetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        }
      ],
      "name": "TrainingSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "trainingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum VerifiAIVerification.VerificationStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accuracy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "precision",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "f1Score",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "confidence",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customMetrics",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct VerifiAIVerification.PerformanceMetrics",
          "name": "metrics",
          "type": "tuple"
        }
      ],
      "name": "VerificationCompleted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DISPUTE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_CONFIDENCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRAINING_STAKE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "queryType",
          "type": "string"
        }
      ],
      "name": "addSupportedQueryType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challenges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "trainingId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "challengeTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isResolved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentChallengeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTrainingId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "datasetTrainingSessions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "datasetId",
          "type": "uint256"
        }
      ],
      "name": "getDatasetPerformanceStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "avgAccuracy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "avgPrecision",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "avgRecall",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "avgF1Score",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sessionCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "datasetId",
          "type": "uint256"
        }
      ],
      "name": "getDatasetTrainingSessions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trainer",
          "type": "address"
        }
      ],
      "name": "getTrainerSessions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trainingId",
          "type": "uint256"
        }
      ],
      "name": "getTrainingSession",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trainer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "datasetId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "modelHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "datasetHash",
              "type": "string"
            },
            {
              "internalType": "enum VerifiAIVerification.ModelType",
              "name": "modelType",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "accuracy",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "precision",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "recall",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "f1Score",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "confidence",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "customMetrics",
                  "type": "string"
                }
              ],
              "internalType": "struct VerifiAIVerification.PerformanceMetrics",
              "name": "metrics",
              "type": "tuple"
            },
            {
              "internalType": "enum VerifiAIVerification.VerificationStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "submissionTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationTime",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "tellorQueryId",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "hasReward",
              "type": "bool"
            }
          ],
          "internalType": "struct VerifiAIVerification.TrainingSession",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trainingId",
          "type": "uint256"
        }
      ],
      "name": "getVerificationResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "datasetId",
          "type": "uint256"
        }
      ],
      "name": "getVerifiedTrainingSessions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trainingId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "submitChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "datasetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "datasetHash",
          "type": "string"
        },
        {
          "internalType": "enum VerifiAIVerification.ModelType",
          "name": "modelType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accuracy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "precision",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "f1Score",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "confidence",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customMetrics",
              "type": "string"
            }
          ],
          "internalType": "struct VerifiAIVerification.PerformanceMetrics",
          "name": "metrics",
          "type": "tuple"
        }
      ],
      "name": "submitTraining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "supportedQueryTypes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tellor",
      "outputs": [
        {
          "internalType": "contract ITellor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trainerSessions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trainingSessions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trainer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "datasetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "modelHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "datasetHash",
          "type": "string"
        },
        {
          "internalType": "enum VerifiAIVerification.ModelType",
          "name": "modelType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accuracy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "precision",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "f1Score",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "confidence",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customMetrics",
              "type": "string"
            }
          ],
          "internalType": "struct VerifiAIVerification.PerformanceMetrics",
          "name": "metrics",
          "type": "tuple"
        },
        {
          "internalType": "enum VerifiAIVerification.VerificationStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "submissionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verificationTime",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "tellorQueryId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "hasReward",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdfc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x752035c6c38b78e1102951a415b6f3d28b45e479a1ed34cfc470ac5c902721bd",
  "receipt": {
    "to": null,
    "from": "0x268d62aba7C42fCB4D72A83137DB503935f764fF",
    "contractAddress": "0xA4643b8582C4751457030b3c980B2aACcA660CC5",
    "transactionIndex": 0,
    "gasUsed": "111377781",
    "logsBloom": "0x
    "blockHash": "0x1c447f8685d58d6d4fcfc452bede5a5f2717edfcab76e6d45ea6eacb177b75f9",
    "transactionHash": "0x752035c6c38b78e1102951a415b6f3d28b45e479a1ed34cfc470ac5c902721bd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2817533,
        "transactionHash": "0x752035c6c38b78e1102951a415b6f3d28b45e479a1ed34cfc470ac5c902721bd",
        "address": "0xA4643b8582C4751457030b3c980B2aACcA660CC5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000268d62aba7c42fcb4d72a83137db503935f764ff"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1c447f8685d58d6d4fcfc452bede5a5f2717edfcab76e6d45ea6eacb177b75f9"
      }
    ],
    "blockNumber": 2817533,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb2CB696fE5244fB9004877e58dcB680cB86Ba444",
    "0x0f703F65596731cFc036cE4eb2acEF37B9169a6e"
  ],
  "numDeployments": 1,
  "solcInputHash": "9e64ae3f474ffb89e119af793cdcef3a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tellor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdfc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"ChallengeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trainingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"}],\"name\":\"ChallengeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trainingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"queryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"queryType\",\"type\":\"string\"}],\"name\":\"TellorQuerySubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trainingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trainer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"datasetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"}],\"name\":\"TrainingSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trainingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum VerifiAIVerification.VerificationStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f1Score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confidence\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customMetrics\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct VerifiAIVerification.PerformanceMetrics\",\"name\":\"metrics\",\"type\":\"tuple\"}],\"name\":\"VerificationCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISPUTE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_CONFIDENCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRAINING_STAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"queryType\",\"type\":\"string\"}],\"name\":\"addSupportedQueryType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trainingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"challengeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isResolved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentChallengeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTrainingId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"datasetTrainingSessions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"datasetId\",\"type\":\"uint256\"}],\"name\":\"getDatasetPerformanceStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"avgAccuracy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgPrecision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgRecall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgF1Score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sessionCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"datasetId\",\"type\":\"uint256\"}],\"name\":\"getDatasetTrainingSessions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trainer\",\"type\":\"address\"}],\"name\":\"getTrainerSessions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trainingId\",\"type\":\"uint256\"}],\"name\":\"getTrainingSession\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trainer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"datasetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"datasetHash\",\"type\":\"string\"},{\"internalType\":\"enum VerifiAIVerification.ModelType\",\"name\":\"modelType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f1Score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confidence\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customMetrics\",\"type\":\"string\"}],\"internalType\":\"struct VerifiAIVerification.PerformanceMetrics\",\"name\":\"metrics\",\"type\":\"tuple\"},{\"internalType\":\"enum VerifiAIVerification.VerificationStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"submissionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"tellorQueryId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"hasReward\",\"type\":\"bool\"}],\"internalType\":\"struct VerifiAIVerification.TrainingSession\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trainingId\",\"type\":\"uint256\"}],\"name\":\"getVerificationResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"datasetId\",\"type\":\"uint256\"}],\"name\":\"getVerifiedTrainingSessions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"resolveChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trainingId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"submitChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"datasetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"datasetHash\",\"type\":\"string\"},{\"internalType\":\"enum VerifiAIVerification.ModelType\",\"name\":\"modelType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f1Score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confidence\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customMetrics\",\"type\":\"string\"}],\"internalType\":\"struct VerifiAIVerification.PerformanceMetrics\",\"name\":\"metrics\",\"type\":\"tuple\"}],\"name\":\"submitTraining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"supportedQueryTypes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tellor\",\"outputs\":[{\"internalType\":\"contract ITellor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trainerSessions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trainingSessions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trainer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"datasetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"modelHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"datasetHash\",\"type\":\"string\"},{\"internalType\":\"enum VerifiAIVerification.ModelType\",\"name\":\"modelType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f1Score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confidence\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customMetrics\",\"type\":\"string\"}],\"internalType\":\"struct VerifiAIVerification.PerformanceMetrics\",\"name\":\"metrics\",\"type\":\"tuple\"},{\"internalType\":\"enum VerifiAIVerification.VerificationStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"submissionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"tellorQueryId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"hasReward\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdfc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"AI model verification system using Tellor oracles\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"addSupportedQueryType(string)\":{\"params\":{\"queryType\":\"Query type to add\"}},\"constructor\":{\"details\":\"Constructor\",\"params\":{\"_tellor\":\"Tellor oracle contract address\",\"_usdfc\":\"USDFC token contract address\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"amount\":\"Amount to withdraw\"}},\"getDatasetPerformanceStats(uint256)\":{\"params\":{\"datasetId\":\"Dataset ID\"},\"returns\":{\"avgAccuracy\":\"Average accuracy\",\"avgF1Score\":\"Average F1 score\",\"avgPrecision\":\"Average precision\",\"avgRecall\":\"Average recall\",\"sessionCount\":\"Number of verified sessions\"}},\"getDatasetTrainingSessions(uint256)\":{\"params\":{\"datasetId\":\"Dataset ID\"},\"returns\":{\"_0\":\"Array of training session IDs\"}},\"getTrainerSessions(address)\":{\"params\":{\"trainer\":\"Trainer address\"},\"returns\":{\"_0\":\"Array of training session IDs\"}},\"getTrainingSession(uint256)\":{\"params\":{\"trainingId\":\"Training session ID\"},\"returns\":{\"_0\":\"Training session details\"}},\"getVerificationResult(uint256)\":{\"params\":{\"trainingId\":\"Training session ID\"}},\"getVerifiedTrainingSessions(uint256)\":{\"params\":{\"datasetId\":\"Dataset ID\"},\"returns\":{\"_0\":\"Array of verified training session IDs\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"resolveChallenge(uint256,bool)\":{\"params\":{\"challengeId\":\"Challenge ID to resolve\",\"isValid\":\"Whether the challenge is valid\"}},\"submitChallenge(uint256,string)\":{\"params\":{\"reason\":\"Reason for the challenge\",\"trainingId\":\"Training session to challenge\"}},\"submitTraining(uint256,string,string,uint8,(uint256,uint256,uint256,uint256,uint256,string))\":{\"params\":{\"datasetHash\":\"IPFS hash of the dataset\",\"datasetId\":\"Dataset used for training\",\"metrics\":\"Self-reported performance metrics\",\"modelHash\":\"IPFS hash of the trained model\",\"modelType\":\"Type of AI model\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"VerifiAIVerification\",\"version\":1},\"userdoc\":{\"events\":{\"TrainingSubmitted(uint256,address,uint256,string)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"DISPUTE_PERIOD()\":{\"notice\":\"Dispute period for challenges (24 hours)\"},\"MIN_CONFIDENCE()\":{\"notice\":\"Minimum confidence threshold for verification (80%)\"},\"ORACLE_TIMEOUT()\":{\"notice\":\"Time window for oracle responses (15 minutes)\"},\"TRAINING_STAKE()\":{\"notice\":\"Minimum stake required for submitting training proofs\"},\"addSupportedQueryType(string)\":{\"notice\":\"Add supported Tellor query type (admin function)\"},\"challenges(uint256)\":{\"notice\":\"Mapping of challenge ID to challenge details\"},\"currentChallengeId()\":{\"notice\":\"Current challenge ID counter\"},\"currentTrainingId()\":{\"notice\":\"Current training session ID counter\"},\"datasetTrainingSessions(uint256,uint256)\":{\"notice\":\"Mapping of dataset to training sessions using it\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Emergency withdrawal of stuck funds (admin function)\"},\"getDatasetPerformanceStats(uint256)\":{\"notice\":\"Calculate average performance metrics for a dataset\"},\"getDatasetTrainingSessions(uint256)\":{\"notice\":\"Get training sessions using a dataset\"},\"getTrainerSessions(address)\":{\"notice\":\"Get training sessions by trainer\"},\"getTrainingSession(uint256)\":{\"notice\":\"Get training session details\"},\"getVerificationResult(uint256)\":{\"notice\":\"Get verification result from Tellor oracle\"},\"getVerifiedTrainingSessions(uint256)\":{\"notice\":\"Get verified training sessions for a dataset\"},\"resolveChallenge(uint256,bool)\":{\"notice\":\"Resolve a challenge (admin function)\"},\"submitChallenge(uint256,string)\":{\"notice\":\"Submit a challenge to a verified training session\"},\"submitTraining(uint256,string,string,uint8,(uint256,uint256,uint256,uint256,uint256,string))\":{\"notice\":\"Submit AI training session for verification\"},\"supportedQueryTypes(string)\":{\"notice\":\"Mapping for custom Tellor query types\"},\"trainerSessions(address,uint256)\":{\"notice\":\"Mapping of trainer to their training session IDs\"},\"trainingSessions(uint256)\":{\"notice\":\"Mapping of training ID to training session\"},\"usdfc()\":{\"notice\":\"USDFC token for payments and stakes\"}},\"notice\":\"Verifies AI training sessions and model performance metrics\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VerifiAIVerification.sol\":\"VerifiAIVerification\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/VerifiAIVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {UsingTellor} from \\\"usingtellor/contracts/UsingTellor.sol\\\";\\n\\n/**\\n * @title VerifiAIVerification\\n * @dev AI model verification system using Tellor oracles\\n * @notice Verifies AI training sessions and model performance metrics\\n */\\ncontract VerifiAIVerification is Ownable, ReentrancyGuard, UsingTellor {\\n    /// @notice Minimum stake required for submitting training proofs\\n    uint256 public constant TRAINING_STAKE = 100 * 10**18; // 100 USDFC\\n    \\n    /// @notice Time window for oracle responses (15 minutes)\\n    uint256 public constant ORACLE_TIMEOUT = 15 minutes;\\n    \\n    /// @notice Minimum confidence threshold for verification (80%)\\n    uint256 public constant MIN_CONFIDENCE = 8000; // 80.00%\\n    \\n    /// @notice Dispute period for challenges (24 hours)\\n    uint256 public constant DISPUTE_PERIOD = 24 hours;\\n\\n    /// @notice USDFC token for payments and stakes\\n    IERC20 public immutable usdfc;\\n\\n    /// @notice Current training session ID counter\\n    uint256 public currentTrainingId;\\n\\n    /// @notice Enumeration for verification status\\n    enum VerificationStatus {\\n        PENDING,\\n        VERIFIED,\\n        FAILED,\\n        DISPUTED,\\n        CANCELLED\\n    }\\n\\n    /// @notice Enumeration for AI model types\\n    enum ModelType {\\n        CLASSIFICATION,\\n        REGRESSION,\\n        NLP,\\n        COMPUTER_VISION,\\n        REINFORCEMENT_LEARNING,\\n        GENERATIVE,\\n        MULTIMODAL\\n    }\\n\\n    /// @notice Structure for performance metrics\\n    struct PerformanceMetrics {\\n        uint256 accuracy;      // Accuracy percentage (0-10000)\\n        uint256 precision;     // Precision percentage (0-10000)\\n        uint256 recall;        // Recall percentage (0-10000)\\n        uint256 f1Score;       // F1 score percentage (0-10000)\\n        uint256 confidence;    // Confidence level (0-10000)\\n        string customMetrics;  // JSON string for additional metrics\\n    }\\n\\n    /// @notice Structure for training session\\n    struct TrainingSession {\\n        uint256 id;\\n        address trainer;\\n        uint256 datasetId;\\n        string modelHash;      // IPFS hash of trained model\\n        string datasetHash;    // IPFS hash of training dataset\\n        ModelType modelType;\\n        PerformanceMetrics metrics;\\n        VerificationStatus status;\\n        uint256 stakeAmount;\\n        uint256 submissionTime;\\n        uint256 verificationTime;\\n        bytes32 tellorQueryId;\\n        bool hasReward;\\n    }\\n\\n    /// @notice Structure for verification challenge\\n    struct Challenge {\\n        uint256 trainingId;\\n        address challenger;\\n        string reason;\\n        uint256 challengeTime;\\n        bool isResolved;\\n        bool isValid;\\n    }\\n\\n    /// @notice Mapping of training ID to training session\\n    mapping(uint256 => TrainingSession) public trainingSessions;\\n    \\n    /// @notice Mapping of trainer to their training session IDs\\n    mapping(address => uint256[]) public trainerSessions;\\n    \\n    /// @notice Mapping of dataset to training sessions using it\\n    mapping(uint256 => uint256[]) public datasetTrainingSessions;\\n    \\n    /// @notice Mapping of challenge ID to challenge details\\n    mapping(uint256 => Challenge) public challenges;\\n    \\n    /// @notice Current challenge ID counter\\n    uint256 public currentChallengeId;\\n\\n    /// @notice Mapping for custom Tellor query types\\n    mapping(string => bool) public supportedQueryTypes;\\n\\n    /// @notice Events\\n    event TrainingSubmitted(\\n        uint256 indexed trainingId,\\n        address indexed trainer,\\n        uint256 indexed datasetId,\\n        string modelHash\\n    );\\n\\n    event VerificationCompleted(\\n        uint256 indexed trainingId,\\n        VerificationStatus status,\\n        PerformanceMetrics metrics\\n    );\\n\\n    event ChallengeSubmitted(\\n        uint256 indexed challengeId,\\n        uint256 indexed trainingId,\\n        address indexed challenger\\n    );\\n\\n    event ChallengeResolved(\\n        uint256 indexed challengeId,\\n        bool isValid,\\n        address resolver\\n    );\\n\\n    event TellorQuerySubmitted(\\n        uint256 indexed trainingId,\\n        bytes32 queryId,\\n        string queryType\\n    );\\n\\n    /// @notice Modifiers\\n    modifier validTraining(uint256 trainingId) {\\n        require(trainingId > 0 && trainingId <= currentTrainingId, \\\"Invalid training ID\\\");\\n        _;\\n    }\\n\\n    modifier onlyTrainer(uint256 trainingId) {\\n        require(trainingSessions[trainingId].trainer == msg.sender, \\\"Not the trainer\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor\\n     * @param _tellor Tellor oracle contract address\\n     * @param _usdfc USDFC token contract address\\n     */\\n    constructor(\\n        address payable _tellor,\\n        address _usdfc\\n    ) UsingTellor(_tellor) Ownable(msg.sender) {\\n        require(_usdfc != address(0), \\\"Invalid USDFC address\\\");\\n        usdfc = IERC20(_usdfc);\\n        \\n        // Initialize supported query types\\n        supportedQueryTypes[\\\"AIModelPerformance\\\"] = true;\\n        supportedQueryTypes[\\\"DatasetQuality\\\"] = true;\\n        supportedQueryTypes[\\\"TrainingVerification\\\"] = true;\\n        supportedQueryTypes[\\\"ModelBenchmark\\\"] = true;\\n    }\\n\\n    /**\\n     * @notice Submit AI training session for verification\\n     * @param datasetId Dataset used for training\\n     * @param modelHash IPFS hash of the trained model\\n     * @param datasetHash IPFS hash of the dataset\\n     * @param modelType Type of AI model\\n     * @param metrics Self-reported performance metrics\\n     */\\n    function submitTraining(\\n        uint256 datasetId,\\n        string memory modelHash,\\n        string memory datasetHash,\\n        ModelType modelType,\\n        PerformanceMetrics memory metrics\\n    ) external nonReentrant {\\n        require(bytes(modelHash).length > 0, \\\"Model hash required\\\");\\n        require(bytes(datasetHash).length > 0, \\\"Dataset hash required\\\");\\n        require(metrics.confidence <= 10000, \\\"Invalid confidence level\\\");\\n\\n        // Transfer stake\\n        require(\\n            usdfc.transferFrom(msg.sender, address(this), TRAINING_STAKE),\\n            \\\"Stake transfer failed\\\"\\n        );\\n\\n        currentTrainingId++;\\n        uint256 trainingId = currentTrainingId;\\n\\n        trainingSessions[trainingId] = TrainingSession({\\n            id: trainingId,\\n            trainer: msg.sender,\\n            datasetId: datasetId,\\n            modelHash: modelHash,\\n            datasetHash: datasetHash,\\n            modelType: modelType,\\n            metrics: metrics,\\n            status: VerificationStatus.PENDING,\\n            stakeAmount: TRAINING_STAKE,\\n            submissionTime: block.timestamp,\\n            verificationTime: 0,\\n            tellorQueryId: bytes32(0),\\n            hasReward: false\\n        });\\n\\n        trainerSessions[msg.sender].push(trainingId);\\n        datasetTrainingSessions[datasetId].push(trainingId);\\n\\n        emit TrainingSubmitted(trainingId, msg.sender, datasetId, modelHash);\\n\\n        // Automatically request oracle verification\\n        _requestOracleVerification(trainingId);\\n    }\\n\\n    /**\\n     * @notice Request Tellor oracle verification for training session\\n     * @param trainingId Training session ID\\n     */\\n    function _requestOracleVerification(uint256 trainingId) internal {\\n        TrainingSession storage session = trainingSessions[trainingId];\\n        \\n        // Create Tellor query for AI model performance verification\\n        bytes memory queryData = abi.encode(\\n            \\\"AIModelPerformance\\\",\\n            abi.encode(\\n                session.modelHash,\\n                session.datasetHash,\\n                uint256(session.modelType),\\n                session.metrics.accuracy,\\n                session.metrics.precision,\\n                session.metrics.recall,\\n                session.metrics.f1Score\\n            )\\n        );\\n        \\n        bytes32 queryId = keccak256(queryData);\\n        session.tellorQueryId = queryId;\\n\\n        emit TellorQuerySubmitted(trainingId, queryId, \\\"AIModelPerformance\\\");\\n    }\\n\\n    /**\\n     * @notice Get verification result from Tellor oracle\\n     * @param trainingId Training session ID\\n     */\\n    function getVerificationResult(uint256 trainingId) \\n        external \\n        validTraining(trainingId) \\n    {\\n        TrainingSession storage session = trainingSessions[trainingId];\\n        require(session.status == VerificationStatus.PENDING, \\\"Not pending verification\\\");\\n        require(session.tellorQueryId != bytes32(0), \\\"No oracle query submitted\\\");\\n\\n        // Get data from Tellor oracle\\n        (bytes memory value, uint256 timestamp) = _getDataBefore(\\n            session.tellorQueryId,\\n            block.timestamp - ORACLE_TIMEOUT\\n        );\\n\\n        require(timestamp > 0, \\\"No oracle data available\\\");\\n        require(block.timestamp - timestamp <= ORACLE_TIMEOUT, \\\"Oracle data too old\\\");\\n\\n        // Decode oracle response\\n        (\\n            bool isValid,\\n            uint256 verifiedAccuracy,\\n            uint256 verifiedPrecision,\\n            uint256 verifiedRecall,\\n            uint256 verifiedF1,\\n            uint256 confidenceLevel\\n        ) = abi.decode(value, (bool, uint256, uint256, uint256, uint256, uint256));\\n\\n        // Update session with verified metrics\\n        session.metrics.accuracy = verifiedAccuracy;\\n        session.metrics.precision = verifiedPrecision;\\n        session.metrics.recall = verifiedRecall;\\n        session.metrics.f1Score = verifiedF1;\\n        session.metrics.confidence = confidenceLevel;\\n        session.verificationTime = block.timestamp;\\n\\n        // Determine verification status\\n        if (isValid && confidenceLevel >= MIN_CONFIDENCE) {\\n            session.status = VerificationStatus.VERIFIED;\\n            \\n            // Return stake plus reward\\n            uint256 rewardAmount = session.stakeAmount + (session.stakeAmount * 20 / 100); // 20% reward\\n            session.hasReward = true;\\n            \\n            require(\\n                usdfc.transfer(session.trainer, rewardAmount),\\n                \\\"Reward transfer failed\\\"\\n            );\\n        } else {\\n            session.status = VerificationStatus.FAILED;\\n            // Stake is forfeited\\n        }\\n\\n        emit VerificationCompleted(trainingId, session.status, session.metrics);\\n    }\\n\\n    /**\\n     * @notice Submit a challenge to a verified training session\\n     * @param trainingId Training session to challenge\\n     * @param reason Reason for the challenge\\n     */\\n    function submitChallenge(\\n        uint256 trainingId,\\n        string memory reason\\n    ) external validTraining(trainingId) {\\n        TrainingSession storage session = trainingSessions[trainingId];\\n        require(session.status == VerificationStatus.VERIFIED, \\\"Only verified sessions can be challenged\\\");\\n        require(\\n            block.timestamp <= session.verificationTime + DISPUTE_PERIOD,\\n            \\\"Challenge period expired\\\"\\n        );\\n        require(bytes(reason).length > 0, \\\"Reason required\\\");\\n\\n        // Require challenger stake (same as training stake)\\n        require(\\n            usdfc.transferFrom(msg.sender, address(this), TRAINING_STAKE),\\n            \\\"Challenge stake transfer failed\\\"\\n        );\\n\\n        currentChallengeId++;\\n        challenges[currentChallengeId] = Challenge({\\n            trainingId: trainingId,\\n            challenger: msg.sender,\\n            reason: reason,\\n            challengeTime: block.timestamp,\\n            isResolved: false,\\n            isValid: false\\n        });\\n\\n        session.status = VerificationStatus.DISPUTED;\\n\\n        emit ChallengeSubmitted(currentChallengeId, trainingId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Resolve a challenge (admin function)\\n     * @param challengeId Challenge ID to resolve\\n     * @param isValid Whether the challenge is valid\\n     */\\n    function resolveChallenge(\\n        uint256 challengeId,\\n        bool isValid\\n    ) external onlyOwner {\\n        Challenge storage challenge = challenges[challengeId];\\n        require(!challenge.isResolved, \\\"Challenge already resolved\\\");\\n        \\n        TrainingSession storage session = trainingSessions[challenge.trainingId];\\n        \\n        challenge.isResolved = true;\\n        challenge.isValid = isValid;\\n\\n        if (isValid) {\\n            // Challenge is valid - mark training as failed\\n            session.status = VerificationStatus.FAILED;\\n            \\n            // Return challenger's stake and give them the training stake\\n            uint256 totalReward = TRAINING_STAKE * 2;\\n            require(\\n                usdfc.transfer(challenge.challenger, totalReward),\\n                \\\"Challenge reward transfer failed\\\"\\n            );\\n        } else {\\n            // Challenge is invalid - restore verified status\\n            session.status = VerificationStatus.VERIFIED;\\n            \\n            // Return training stake to original trainer\\n            require(\\n                usdfc.transfer(session.trainer, TRAINING_STAKE),\\n                \\\"Trainer stake return failed\\\"\\n            );\\n        }\\n\\n        emit ChallengeResolved(challengeId, isValid, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Get training session details\\n     * @param trainingId Training session ID\\n     * @return Training session details\\n     */\\n    function getTrainingSession(uint256 trainingId) \\n        external \\n        view \\n        validTraining(trainingId)\\n        returns (TrainingSession memory) \\n    {\\n        return trainingSessions[trainingId];\\n    }\\n\\n    /**\\n     * @notice Get training sessions by trainer\\n     * @param trainer Trainer address\\n     * @return Array of training session IDs\\n     */\\n    function getTrainerSessions(address trainer) \\n        external \\n        view \\n        returns (uint256[] memory) \\n    {\\n        return trainerSessions[trainer];\\n    }\\n\\n    /**\\n     * @notice Get training sessions using a dataset\\n     * @param datasetId Dataset ID\\n     * @return Array of training session IDs\\n     */\\n    function getDatasetTrainingSessions(uint256 datasetId) \\n        external \\n        view \\n        returns (uint256[] memory) \\n    {\\n        return datasetTrainingSessions[datasetId];\\n    }\\n\\n    /**\\n     * @notice Get verified training sessions for a dataset\\n     * @param datasetId Dataset ID\\n     * @return Array of verified training session IDs\\n     */\\n    function getVerifiedTrainingSessions(uint256 datasetId) \\n        external \\n        view \\n        returns (uint256[] memory) \\n    {\\n        uint256[] memory allSessions = datasetTrainingSessions[datasetId];\\n        uint256[] memory verifiedSessions = new uint256[](allSessions.length);\\n        uint256 count = 0;\\n\\n        for (uint256 i = 0; i < allSessions.length; i++) {\\n            if (trainingSessions[allSessions[i]].status == VerificationStatus.VERIFIED) {\\n                verifiedSessions[count] = allSessions[i];\\n                count++;\\n            }\\n        }\\n\\n        // Resize array to actual count\\n        assembly {\\n            mstore(verifiedSessions, count)\\n        }\\n\\n        return verifiedSessions;\\n    }\\n\\n    /**\\n     * @notice Calculate average performance metrics for a dataset\\n     * @param datasetId Dataset ID\\n     * @return avgAccuracy Average accuracy\\n     * @return avgPrecision Average precision\\n     * @return avgRecall Average recall\\n     * @return avgF1Score Average F1 score\\n     * @return sessionCount Number of verified sessions\\n     */\\n    function getDatasetPerformanceStats(uint256 datasetId) \\n        external \\n        view \\n        returns (\\n            uint256 avgAccuracy,\\n            uint256 avgPrecision,\\n            uint256 avgRecall,\\n            uint256 avgF1Score,\\n            uint256 sessionCount\\n        ) \\n    {\\n        uint256[] memory sessions = datasetTrainingSessions[datasetId];\\n        uint256 totalAccuracy = 0;\\n        uint256 totalPrecision = 0;\\n        uint256 totalRecall = 0;\\n        uint256 totalF1 = 0;\\n        uint256 verifiedCount = 0;\\n\\n        for (uint256 i = 0; i < sessions.length; i++) {\\n            TrainingSession storage session = trainingSessions[sessions[i]];\\n            if (session.status == VerificationStatus.VERIFIED) {\\n                totalAccuracy += session.metrics.accuracy;\\n                totalPrecision += session.metrics.precision;\\n                totalRecall += session.metrics.recall;\\n                totalF1 += session.metrics.f1Score;\\n                verifiedCount++;\\n            }\\n        }\\n\\n        if (verifiedCount > 0) {\\n            avgAccuracy = totalAccuracy / verifiedCount;\\n            avgPrecision = totalPrecision / verifiedCount;\\n            avgRecall = totalRecall / verifiedCount;\\n            avgF1Score = totalF1 / verifiedCount;\\n        }\\n\\n        sessionCount = verifiedCount;\\n    }\\n\\n    /**\\n     * @notice Add supported Tellor query type (admin function)\\n     * @param queryType Query type to add\\n     */\\n    function addSupportedQueryType(string memory queryType) external onlyOwner {\\n        supportedQueryTypes[queryType] = true;\\n    }\\n\\n    /**\\n     * @notice Emergency withdrawal of stuck funds (admin function)\\n     * @param amount Amount to withdraw\\n     */\\n    function emergencyWithdraw(uint256 amount) external onlyOwner {\\n        require(usdfc.transfer(owner(), amount), \\\"Withdrawal failed\\\");\\n    }\\n} \",\"keccak256\":\"0x232b71c58dbb32f46b678bd65a9466ee3c0ad8fe1e1498cba163f1cc4c681799\",\"license\":\"MIT\"},\"usingtellor/contracts/UsingTellor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./interface/ITellor.sol\\\";\\n\\n/**\\n @author Tellor Inc\\n @title UsingTellor\\n @dev This contract helps smart contracts read data from Tellor\\n */\\ncontract UsingTellor{\\n    ITellor public tellor;\\n\\n    /*Constructor*/\\n    /**\\n     * @dev the constructor sets the oracle address in storage\\n     * @param _tellor is the Tellor Oracle address\\n     */\\n    constructor(address payable _tellor) {\\n        tellor = ITellor(_tellor);\\n    }\\n\\n    /*Getters*/\\n    /**\\n     * @dev Retrieves the next value for the queryId after the specified timestamp\\n     * @param _queryId is the queryId to look up the value for\\n     * @param _timestamp after which to search for next value\\n     * @return _value the value retrieved\\n     * @return _timestampRetrieved the value's timestamp\\n     */\\n    function _getDataAfter(bytes32 _queryId, uint256 _timestamp)\\n        internal\\n        view\\n        returns (bytes memory _value, uint256 _timestampRetrieved)\\n    {\\n        (bool _found, uint256 _index) = _getIndexForDataAfter(\\n            _queryId,\\n            _timestamp\\n        );\\n        if (!_found) {\\n            return (\\\"\\\", 0);\\n        }\\n        _timestampRetrieved = _getTimestampbyQueryIdandIndex(_queryId, _index);\\n        _value = _retrieveData(_queryId, _timestampRetrieved);\\n        return (_value, _timestampRetrieved);\\n    }\\n\\n    /**\\n     * @dev Retrieves the latest value for the queryId before the specified timestamp\\n     * @param _queryId is the queryId to look up the value for\\n     * @param _timestamp before which to search for latest value\\n     * @return _value the value retrieved\\n     * @return _timestampRetrieved the value's timestamp\\n     */\\n    function _getDataBefore(bytes32 _queryId, uint256 _timestamp)\\n        internal\\n        view\\n        returns (bytes memory _value, uint256 _timestampRetrieved)\\n    {\\n        (, _value, _timestampRetrieved) = tellor.getDataBefore(\\n            _queryId,\\n            _timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Retrieves latest array index of data before the specified timestamp for the queryId\\n     * @param _queryId is the queryId to look up the index for\\n     * @param _timestamp is the timestamp before which to search for the latest index\\n     * @return _found whether the index was found\\n     * @return _index the latest index found before the specified timestamp\\n     */\\n    // slither-disable-next-line calls-loop\\n    function _getIndexForDataAfter(bytes32 _queryId, uint256 _timestamp)\\n        internal\\n        view\\n        returns (bool _found, uint256 _index)\\n    {\\n        uint256 _count = _getNewValueCountbyQueryId(_queryId);\\n        if (_count == 0) return (false, 0);\\n        _count--;\\n        bool _search = true; // perform binary search\\n        uint256 _middle = 0;\\n        uint256 _start = 0;\\n        uint256 _end = _count;\\n        uint256 _timestampRetrieved;\\n        // checking boundaries to short-circuit the algorithm\\n        _timestampRetrieved = _getTimestampbyQueryIdandIndex(_queryId, _end);\\n        if (_timestampRetrieved <= _timestamp) return (false, 0);\\n        _timestampRetrieved = _getTimestampbyQueryIdandIndex(_queryId, _start);\\n        if (_timestampRetrieved > _timestamp) {\\n            // candidate found, check for disputes\\n            _search = false;\\n        }\\n        // since the value is within our boundaries, do a binary search\\n        while (_search) {\\n            _middle = (_end + _start) / 2;\\n            _timestampRetrieved = _getTimestampbyQueryIdandIndex(\\n                _queryId,\\n                _middle\\n            );\\n            if (_timestampRetrieved > _timestamp) {\\n                // get immediate previous value\\n                uint256 _prevTime = _getTimestampbyQueryIdandIndex(\\n                    _queryId,\\n                    _middle - 1\\n                );\\n                if (_prevTime <= _timestamp) {\\n                    // candidate found, check for disputes\\n                    _search = false;\\n                } else {\\n                    // look from start to middle -1(prev value)\\n                    _end = _middle - 1;\\n                }\\n            } else {\\n                // get immediate next value\\n                uint256 _nextTime = _getTimestampbyQueryIdandIndex(\\n                    _queryId,\\n                    _middle + 1\\n                );\\n                if (_nextTime > _timestamp) {\\n                    // candidate found, check for disputes\\n                    _search = false;\\n                    _middle++;\\n                    _timestampRetrieved = _nextTime;\\n                } else {\\n                    // look from middle + 1(next value) to end\\n                    _start = _middle + 1;\\n                }\\n            }\\n        }\\n        // candidate found, check for disputed values\\n        if (!_isInDispute(_queryId, _timestampRetrieved)) {\\n            // _timestampRetrieved is correct\\n            return (true, _middle);\\n        } else {\\n            // iterate forward until we find a non-disputed value\\n            while (\\n                _isInDispute(_queryId, _timestampRetrieved) && _middle < _count\\n            ) {\\n                _middle++;\\n                _timestampRetrieved = _getTimestampbyQueryIdandIndex(\\n                    _queryId,\\n                    _middle\\n                );\\n            }\\n            if (\\n                _middle == _count && _isInDispute(_queryId, _timestampRetrieved)\\n            ) {\\n                return (false, 0);\\n            }\\n            // _timestampRetrieved is correct\\n            return (true, _middle);\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves latest array index of data before the specified timestamp for the queryId\\n     * @param _queryId is the queryId to look up the index for\\n     * @param _timestamp is the timestamp before which to search for the latest index\\n     * @return _found whether the index was found\\n     * @return _index the latest index found before the specified timestamp\\n     */\\n    // slither-disable-next-line calls-loop\\n    function _getIndexForDataBefore(bytes32 _queryId, uint256 _timestamp)\\n        internal\\n        view\\n        returns (bool _found, uint256 _index)\\n    {\\n        return tellor.getIndexForDataBefore(_queryId, _timestamp);\\n    }\\n\\n    /**\\n     * @dev Retrieves multiple uint256 values before the specified timestamp\\n     * @param _queryId the unique id of the data query\\n     * @param _timestamp the timestamp before which to search for values\\n     * @param _maxAge the maximum number of seconds before the _timestamp to search for values\\n     * @param _maxCount the maximum number of values to return\\n     * @return _values the values retrieved, ordered from oldest to newest\\n     * @return _timestamps the timestamps of the values retrieved\\n     */\\n    function _getMultipleValuesBefore(\\n        bytes32 _queryId,\\n        uint256 _timestamp,\\n        uint256 _maxAge,\\n        uint256 _maxCount\\n    )\\n        internal\\n        view\\n        returns (bytes[] memory _values, uint256[] memory _timestamps)\\n    {\\n        // get index of first possible value\\n        (bool _ifRetrieve, uint256 _startIndex) = _getIndexForDataAfter(\\n            _queryId,\\n            _timestamp - _maxAge\\n        );\\n        // no value within range\\n        if (!_ifRetrieve) {\\n            return (new bytes[](0), new uint256[](0));\\n        }\\n        uint256 _endIndex;\\n        // get index of last possible value\\n        (_ifRetrieve, _endIndex) = _getIndexForDataBefore(_queryId, _timestamp);\\n        // no value before _timestamp\\n        if (!_ifRetrieve) {\\n            return (new bytes[](0), new uint256[](0));\\n        }\\n        uint256 _valCount = 0;\\n        uint256 _index = 0;\\n        uint256[] memory _timestampsArrayTemp = new uint256[](_maxCount);\\n        // generate array of non-disputed timestamps within range\\n        while (_valCount < _maxCount && _endIndex + 1 - _index > _startIndex) {\\n            uint256 _timestampRetrieved = _getTimestampbyQueryIdandIndex(\\n                _queryId,\\n                _endIndex - _index\\n            );\\n            if (!_isInDispute(_queryId, _timestampRetrieved)) {\\n                _timestampsArrayTemp[_valCount] = _timestampRetrieved;\\n                _valCount++;\\n            }\\n            _index++;\\n        }\\n\\n        bytes[] memory _valuesArray = new bytes[](_valCount);\\n        uint256[] memory _timestampsArray = new uint256[](_valCount);\\n        // retrieve values and reverse timestamps order\\n        for (uint256 _i = 0; _i < _valCount; _i++) {\\n            _timestampsArray[_i] = _timestampsArrayTemp[_valCount - 1 - _i];\\n            _valuesArray[_i] = _retrieveData(_queryId, _timestampsArray[_i]);\\n        }\\n        return (_valuesArray, _timestampsArray);\\n    }\\n\\n    /**\\n     * @dev Counts the number of values that have been submitted for the queryId\\n     * @param _queryId the id to look up\\n     * @return uint256 count of the number of values received for the queryId\\n     */\\n    function _getNewValueCountbyQueryId(bytes32 _queryId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return tellor.getNewValueCountbyQueryId(_queryId);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the reporter who submitted a value for a data ID at a specific time\\n     * @param _queryId is ID of the specific data feed\\n     * @param _timestamp is the timestamp to find a corresponding reporter for\\n     * @return address of the reporter who reported the value for the data ID at the given timestamp\\n     */\\n    function _getReporterByTimestamp(bytes32 _queryId, uint256 _timestamp)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return tellor.getReporterByTimestamp(_queryId, _timestamp);\\n    }\\n\\n    /**\\n     * @dev Gets the timestamp for the value based on their index\\n     * @param _queryId is the id to look up\\n     * @param _index is the value index to look up\\n     * @return uint256 timestamp\\n     */\\n    function _getTimestampbyQueryIdandIndex(bytes32 _queryId, uint256 _index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return tellor.getTimestampbyQueryIdandIndex(_queryId, _index);\\n    }\\n\\n    /**\\n     * @dev Determines whether a value with a given queryId and timestamp has been disputed\\n     * @param _queryId is the value id to look up\\n     * @param _timestamp is the timestamp of the value to look up\\n     * @return bool true if queryId/timestamp is under dispute\\n     */\\n    function _isInDispute(bytes32 _queryId, uint256 _timestamp)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return tellor.isInDispute(_queryId, _timestamp);\\n    }\\n\\n    /**\\n     * @dev Retrieve value from oracle based on queryId/timestamp\\n     * @param _queryId being requested\\n     * @param _timestamp to retrieve data/value from\\n     * @return bytes value for query/timestamp submitted\\n     */\\n    function  _retrieveData(bytes32 _queryId, uint256 _timestamp)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return tellor.retrieveData(_queryId, _timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xb32e10bdfe378f00829b73041afe84f74198c024b4a25c710516e7762c12fb17\",\"license\":\"MIT\"},\"usingtellor/contracts/interface/ITellor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ITellor {\\n    function getNewValueCountbyQueryId(bytes32 _queryId) external view returns (uint256);\\n    function getTimestampbyQueryIdandIndex(bytes32 _queryId, uint256 _index) external view returns (uint256);\\n    function retrieveData(bytes32 _queryId, uint256 _timestamp) external view returns (bytes memory);\\n    function getReporterByTimestamp(bytes32 _queryId, uint256 _timestamp) external view returns (address);\\n    function getDataBefore(bytes32 _queryId, uint256 _timestamp) external  view  returns(bool _ifRetrieve, bytes memory _value, uint256 _timestampRetrieved);\\n    function getIndexForDataBefore(bytes32 _queryId, uint256 _timestamp) external view returns (bool _found, uint256 _index);\\n    function isInDispute(bytes32 _queryId, uint256 _timestamp) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb6a69e8bee2654ab947ce7324541a3ae1a1998a1923c98558cd33518ec05858d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523462000064576200001f6200001862000118565b906200034f565b60405161338d6200055b823960805181818161044a015281816116b701528181611f6601528181612378015281816124450152818161279a0152612d45015261338d90f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b03821117620000a157604052565b62000069565b90620000be620000b660405190565b92836200007f565b565b6001600160a01b031690565b90565b6001600160a01b038116036200006457565b90505190620000be82620000cf565b91906040838203126200006457620000cc906020620001108286620000e1565b9401620000e1565b6200013b620038e8803803806200012f81620000a7565b928339810190620000f0565b9091565b620000c0620000cc620000cc9290565b620000cc906200013f565b0190565b156200016657565b60405162461bcd60e51b815260206004820152601560248201527f496e76616c6964205553444643206164647265737300000000000000000000006044820152606490fd5b0390fd5b620000cc90620000c0906001600160a01b031682565b620000cc90620001af565b620000cc90620001c5565b906200015a620002056020937141494d6f64656c506572666f726d616e636560701b815260120190565b918252565b62000223906200021960405190565b91829182620001db565b03902090565b620000cc906200020a565b9060ff905b9181191691161790565b9062000256620000cc6200025e92151590565b825462000234565b9055565b906200015a620002056020936d446174617365745175616c69747960901b8152600e0190565b62000223906200029760405190565b9182918262000262565b620000cc9062000288565b906200015a620002056020937f547261696e696e67566572696669636174696f6e000000000000000000000000815260140190565b6200022390620002f060405190565b91829182620002ac565b620000cc90620002e1565b906200015a620002056020936d4d6f64656c42656e63686d61726b60901b8152600e0190565b62000223906200033a60405190565b9182918262000305565b620000cc906200032b565b90620003616200038d92339062000404565b6200038762000375620000c060006200014f565b6001600160a01b03831614156200015e565b620001d0565b608052620000be6001620003ac6009620003b283620003ac8362000229565b62000243565b620003c283620003ac83620002a1565b620003d283620003ac83620002fa565b62000344565b906001600160a01b039062000239565b90620003fc620000cc6200025e92620001d0565b8254620003d8565b620004189062000387620000be9362000463565b6002620003e8565b620000cc620000cc620000cc9290565b620000cc600162000420565b906000199062000239565b906200045b620000cc6200025e9262000420565b82546200043c565b6200046e9062000484565b620000be6200047c62000430565b600162000447565b6200049060006200014f565b6001600160a01b0381166001600160a01b03831614620004b65750620000be9062000500565b620001ab90620004c560405190565b631e4fbdf760e01b8152918291600483016001600160a01b03909116815260200190565b620000cc90620000c0565b620000cc9054620004e9565b6200052862000521620005146000620004f4565b62000387846000620003e8565b91620001d0565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06200055460405190565b600090a356fe6080604052600436101561001257600080fd5b60003560e01c806307f60569146101c2578063091d1316146101bd57806309592180146101b85780630afc79af146101b35780631006e4cb146101ae5780631959ad5b146101a957806326d580f9146101a4578063275c315f1461019f57806341f937571461019a57806345cc2c96146101955780635312ea8e1461019057806357fb223c1461018b5780635c71da7e14610186578063702261f614610181578063715018a61461017c5780637f5c7af0146101775780638da5cb5b146101725780638f1d37761461016d57806390bbdfd81461016857806394a754e014610163578063a5bbe22b1461015e578063aedec93714610159578063bbed7fdb14610154578063d1fddfdf1461014f578063df0af1561461014a578063ece09779146101455763f2fde38b036101c757611147565b61110a565b610edc565b610e3d565b610e24565b610dd2565b610d90565b610d63565b610d13565b610cb9565b610a89565b610a6d565b610863565b610848565b610821565b6107d6565b61077c565b610761565b610733565b6106f8565b6106c5565b61049a565b610435565b6103f6565b6103b6565b610295565b61026a565b600080fd5b805b036101c757565b905035906101e2826101cc565b565b906020828203126101c7576101f8916101d5565b90565b9052565b0190565b9061022361021c610212845190565b8084529260200190565b9260200190565b9060005b8181106102345750505090565b90919261025161024a6001928651815260200190565b9460200190565b929101610227565b60208082526101f892910190610203565b346101c7576102916102856102803660046101e4565b6111e4565b60405191829182610259565b0390f35b346101c7576102916102856102ab3660046101e4565b611295565b6001600160a01b031690565b6001600160a01b0381166101ce565b905035906101e2826102bc565b91906040838203126101c7576101f89060206102f482866102cb565b94016101d5565b6102b06101f86101f8926001600160a01b031690565b6101f8906102fb565b6101f890610311565b9061032d9061031a565b600052602052604060002090565b634e487b7160e01b600052603260045260246000fd5b80548210156103745761036b600191600052602060002090565b91020190600090565b61033b565b6101f8916008021c81565b906101f89154610379565b61039a906005610323565b80548210156101c7576101f8916103b091610351565b90610384565b346101c7576102916103d26103cc3660046102d8565b9061038f565b6040519182918290815260200190565b906020828203126101c7576101f8916102cb565b346101c75761029161028561040c3660046103e2565b611357565b60009103126101c757565b6101fb9061031a565b6020810192916101e2919061041c565b346101c757610445366004610411565b6102917f00000000000000000000000000000000000000000000000000000000000000005b60405191829182610425565b6101f8916008021c6102b0565b906101f89154610476565b6101f860006002610483565b346101c7576104aa366004610411565b61029161046a61048e565b60005b8381106104c85750506000910152565b81810151838201526020016104b8565b6104f96105026020936101ff936104ed815190565b80835293849260200190565b958691016104b5565b601f01601f191690565b634e487b7160e01b600052602160045260246000fd5b6007111561052c57565b61050c565b906101e282610522565b6101f890610531565b6101fb9061053b565b805182526101f89160c081019160a09061056c60208201516020850152565b61057b60408201516040850152565b61058a60608201516060850152565b61059960808201516080850152565b01519060a08184039101526104d8565b6005111561052c57565b906101e2826105a9565b6101f8906105b3565b6101fb906105bd565b805182526020808201516001600160a01b031690830152906101f8906101808061065461063061061e6101a0860161060c60408a01516040890152565b606089015187820360608901526104d8565b608088015186820360808801526104d8565b61064260a088015160a0870190610544565b60c087015185820360c087015261054d565b9461066760e082015160e08601906105c6565b610678610100820151610100860152565b610689610120820151610120860152565b61069a610140820151610140860152565b6106ab610160820151610160860152565b01511515910152565b60208082526101f8929101906105cf565b346101c7576102916106e06106db3660046101e4565b6115f4565b604051918291826106b4565b6101f860006003610384565b346101c757610708366004610411565b6102916103d26106ec565b6101f86101f86101f89290565b6101f8611f40610713565b6101f8610720565b346101c757610743366004610411565b6102916103d261072b565b6101f8610384610713565b6101f861074e565b346101c757610771366004610411565b6102916103d2610759565b346101c75761079461078f3660046101e4565b61175d565b604051005b909594926101e2946107cb6107d2926107c46080966107bd60a088019c6000890152565b6020870152565b6040850152565b6060830152565b0152565b346101c7576102916107f16107ec3660046101e4565b6117ac565b916107fe95939560405190565b95869586610799565b6101f868056bc75e2d63100000610713565b6101f8610807565b346101c757610831366004610411565b6102916103d2610819565b6101f860006008610384565b346101c757610858366004610411565b6102916103d261083c565b346101c757610873366004610411565b610794611948565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176108b357604052565b61087b565b906101e26108c560405190565b9283610891565b67ffffffffffffffff81116108b357602090601f01601f19160190565b90826000939282370152565b9092919261090a610905826108cc565b6108b8565b93818552818301116101c7576101e29160208501906108e9565b9080601f830112156101c7578160206101f8933591016108f5565b600711156101c757565b905035906101e28261093f565b91909160c0818403126101c75761096d60c06108b8565b9261097881836101d5565b845261098781602084016101d5565b602085015261099981604084016101d5565b60408501526109ab81606084016101d5565b60608501526109bd81608084016101d5565b608085015260a082013567ffffffffffffffff81116101c7576109e09201610924565b60a0830152565b91909160a0818403126101c7576109fe83826101d5565b92602082013567ffffffffffffffff81116101c75781610a1f918401610924565b92604083013567ffffffffffffffff81116101c75782610a40918501610924565b92610a4e8360608301610949565b92608082013567ffffffffffffffff81116101c7576101f89201610956565b346101c757610794610a803660046109e7565b93929092612157565b346101c757610a99366004610411565b610291610aa4612164565b604051918291826001600160a01b03909116815260200190565b9061032d90610713565b6101f89081565b6101f89054610ac8565b6101f8906102b0565b6101f89054610ad9565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610b22575b6020831014610b1d57565b610aec565b91607f1691610b12565b80546000939291610b49610b3f83610b02565b8085529360200190565b9160018116908115610b9b5750600114610b6257505050565b610b759192939450600052602060002090565b916000925b818410610b875750500190565b805484840152602090930192600101610b7a565b92949550505060ff1916825215156020020190565b906101f891610b2c565b906101e2610bd492610bcb60405190565b93848092610bb0565b0383610891565b6101f8905b60ff1690565b6101f89054610bdb565b6101f89060081c610be0565b6101f89054610bf0565b610c11906007610abe565b90610c1b82610acf565b91610c2860018201610ae2565b91610c3560028301610bba565b91610c4260038201610acf565b916101f86004610c53818501610be6565b9301610bfc565b9194610ca8610ca0610cb19360a096610c936101e29a9c9b999c610c8360c08a019460008b0152565b6001600160a01b03166020890152565b86820360408801526104d8565b986060850152565b15156080830152565b019015159052565b346101c757610291610cd4610ccf3660046101e4565b610c06565b92610ce496949692919260405190565b96879687610c5a565b906020828203126101c757813567ffffffffffffffff81116101c7576101f89201610924565b346101c757610794610d26366004610ced565b61218f565b8015156101ce565b905035906101e282610d2b565b91906040838203126101c7576101f8906020610d5c82866101d5565b9401610d33565b346101c757610794610d76366004610d40565b906124e2565b6101f862015180610713565b6101f8610d7c565b346101c757610da0366004610411565b6102916103d2610d88565b91906040838203126101c7576101f89060206102f482866101d5565b61039a906006610abe565b346101c7576102916103d2610de8366004610dab565b90610dc7565b9190916040818403126101c757610e0583826101d5565b92602082013567ffffffffffffffff81116101c7576101f89201610924565b346101c757610794610e37366004610dee565b906128e4565b346101c757610794610e503660046101e4565b612e45565b6101ff610e6d92602092610e67815190565b94859290565b938491016104b5565b610e866101ff9160209493610e55565b918252565b610ea0610e9760405190565b92839283610e76565b03902090565b6101f891610e8b565b6101f8916008021c610be0565b906101f89154610eaf565b6000610ed76101f8926009610ea6565b610ebc565b346101c757610291610ef7610ef2366004610ced565b610ec7565b60405191829182901515815260200190565b6101f860c06108b8565b906101e2610f936005610f24610f09565b94610f35610f3182610acf565b8752565b610f4b610f4460018301610acf565b6020880152565b610f61610f5a60028301610acf565b6040880152565b610f77610f7060038301610acf565b6060880152565b610f8d610f8660048301610acf565b6080880152565b01610bba565b60a0840152565b610fa5906004610abe565b610fae81610acf565b91610fbb60018301610ae2565b91610fc860028201610acf565b91610fd560038301610bba565b91610fe260048201610bba565b91610fef60058301610be6565b91610ffc60068201610f13565b91611009600c8301610be6565b91611016600d8201610acf565b91611023600e8301610acf565b91611030600f8201610acf565b916101f8601161104260108501610acf565b9301610be6565b98906110df610cb1999f9e9c966101e29e996110d26111029a6101809f988f946110ca906110bc6110ea996110fa9e6110af60a0966110f29f6110a89060208e6110996101a08201986000830152565b01906001600160a01b03169052565b60408c0152565b89820360608b01526104d8565b9087820360808901526104d8565b940190610544565b8c820360c08e015261054d565b9e60e08b01906105c6565b610100890152565b610120870152565b610140850152565b610160830152565b346101c7576102916111256111203660046101e4565b610f9a565b9961113e9d9b9d99919998929897939796949660405190565b9d8e9d8e611049565b346101c75761079461115a3660046103e2565b612ed1565b9061117a61116e610212845490565b92600052602060002090565b9060005b81811061118b5750505090565b9091926111af6111a86001926111a087610acf565b815260200190565b9460010190565b92910161117e565b906101f89161115f565b906101e2610bd4926111d260405190565b938480926111b7565b6101f8906111c1565b6111fb6101f8916111f3606090565b506006610abe565b6111db565b67ffffffffffffffff81116108b35760208091020190565b90610e8661090583611200565b369037565b906101e261124061123a84611218565b93611200565b601f190160208401611225565b90611256825190565b811015610374576020809102010190565b5190565b634e487b7160e01b600052601160045260246000fd5b60001981146112905760010190565b61126b565b6111fb6112a4916111f3606090565b906112b56112b0835190565b61122a565b6112bf6000610713565b90815b6112cd6101f8865190565b81101561134f576112f7600c6112f160046112eb611267868b61124d565b90610abe565b01610be6565b61130a61130460016105b3565b916105b3565b1461131d575b6001016112c2565b6112c2565b9161134761131891611342611335611267878a61124d565b61133f838761124d565b52565b611281565b929050611310565b509081529150565b6111fb6101f891611366606090565b506005610323565b6101f86101a06108b8565b611381610f09565b906000825260208080808080870160008152016000815201600081520160008152016060905250565b6101f8611379565b6020908180808080808080808080806113c961136e565b9d8e6000815201600081520160008152016060815201606081520160008152016113f16113aa565b815201600081520160008152016000815201600081520160008152016000905250565b6101f86113b2565b1561142357565b60405162461bcd60e51b815260206004820152601360248201527f496e76616c696420747261696e696e67204944000000000000000000000000006044820152606490fd5b0390fd5b906101f89161147b6000610713565b821180611491575b61148c9061141c565b6115df565b5061148c6114a26101f86003610acf565b8311159050611483565b906101fb90610531565b906101fb906105b3565b906101e26115cc60116114d161136e565b946114de610f3182610acf565b6114fd6114ed60018301610ae2565b6001600160a01b03166020880152565b61150c610f5a60028301610acf565b61151b610f7060038301610bba565b61152a610f8660048301610bba565b61154261153960058301610be6565b60a088016114ac565b61155861155160068301610f13565b60c0880152565b611570611567600c8301610be6565b60e088016114b6565b61158761157f600d8301610acf565b610100880152565b61159e611596600e8301610acf565b610120880152565b6115b56115ad600f8301610acf565b610140880152565b6112f16115c460108301610acf565b610160880152565b1515610180840152565b6101f8906114c0565b6101f8916115ef91506004610abe565b6115d6565b6101f890611600611414565b61146c565b6101e290611611612eda565b6116ac565b905051906101e282610d2b565b906020828203126101c7576101f891611616565b6001600160a01b0390911681526040810192916101e29160200152565b6040513d6000823e3d90fd5b1561166757565b60405162461bcd60e51b815260206004820152601160248201527f5769746864726177616c206661696c65640000000000000000000000000000006044820152606490fd5b602061170d916116db7f000000000000000000000000000000000000000000000000000000000000000061031a565b6116e3612164565b60006116ee60405190565b80968195829461170263a9059cbb60e01b90565b845260048401611637565b03925af18015611758576101e291600091611729575b50611660565b61174b915060203d602011611751575b6117438183610891565b810190611623565b38611723565b503d611739565b611654565b6101e290611605565b9190611771565b9290565b820180921161129057565b634e487b7160e01b600052601260045260246000fd5b9061179c565b9190565b9081156117a7570490565b61177c565b90600091828093816117c46111fb6006956006610abe565b936000966117d188610713565b9586948792889589988a5b6117e76101f8875190565b8110156118af578d6118046101f860046112eb611267868c61124d565b90611811600c8301610be6565b91600192611821611304856105b3565b14611839575b5050506118349060010190565b6117dc565b8a909e91999c929e9d9b939d0198890161185290610acf565b61185b91611766565b9c880161186790610acf565b61187091611766565b9961187d60028901610acf565b61188691611766565b9660030161189390610acf565b61189c91611766565b976118a690611281565b99388e81611827565b509896935098919a6118c4919a979550610713565b85116118d2575b5050505090565b8480975080949a50611900939950809298506118f4611906966118fa93611792565b9a611792565b97611792565b94611792565b91388080806118cb565b611918612eda565b6101e2611936565b6102b06101f86101f89290565b6101f890611920565b6101e2611943600061192d565b612f41565b6101e2611910565b9061196594939291611960612fa2565b611efb565b6101e2612ffb565b1561197457565b60405162461bcd60e51b815260206004820152601360248201527f4d6f64656c2068617368207265717569726564000000000000000000000000006044820152606490fd5b156119c057565b60405162461bcd60e51b815260206004820152601560248201527f44617461736574206861736820726571756972656400000000000000000000006044820152606490fd5b15611a0c57565b60405162461bcd60e51b815260206004820152601860248201527f496e76616c696420636f6e666964656e6365206c6576656c00000000000000006044820152606490fd5b6001600160a01b039182168152911660208201526060810192916101e29160400152565b15611a7c57565b60405162461bcd60e51b815260206004820152601560248201527f5374616b65207472616e73666572206661696c656400000000000000000000006044820152606490fd5b90600019905b9181191691161790565b90611ae16101f8611ae892610713565b8254611ac1565b9055565b906001600160a01b0390611ac7565b90611b0b6101f8611ae89261031a565b8254611aec565b9160001960089290920291821b911b611ac7565b9190611b376101f8611ae893610713565b908354611b12565b6101e291600091611b26565b818110611b56575050565b80611b646000600193611b3f565b01611b4b565b9190601f8111611b7957505050565b611b8b6101e293600052602060002090565b906020601f840181900483019310611bad575b6020601f909101040190611b4b565b9091508190611b9e565b90611bc0815190565b9067ffffffffffffffff82116108b357611be482611bde8554610b02565b85611b6a565b602090601f8311600114611c1f57611ae8929160009183611c14575b5050600019600883021c1916906002021790565b015190503880611c00565b601f19831691611c3485600052602060002090565b9260005b818110611c7257509160029391856001969410611c59575b50505002019055565b01516000196008601f8516021c19169055388080611c50565b91936020600181928787015181550195019201611c38565b906101e291611bb7565b6101f89051610531565b9060ff90611ac7565b90611cb76101f8611ae89261053b565b8254611c9e565b6005611d3e60a06101e294611cdd611cd7600083015190565b86611ad1565b611cf4611ceb602083015190565b60018701611ad1565b611d0b611d02604083015190565b60028701611ad1565b611d22611d19606083015190565b60038701611ad1565b611d39611d30608083015190565b60048701611ad1565b015190565b9101611c8a565b906101e291611cbe565b6101f890516105b3565b90611cb76101f8611ae8926105bd565b90611ae16101f8611ae89290565b90611cb76101f8611ae892151590565b6011611eab6101806101e294611da1611cd7600083015190565b611dc1611db860208301516001600160a01b031690565b60018701611afb565b611dcf611d02604083015190565b611de6611ddd606083015190565b60038701611c8a565b611dfd611df4608083015190565b60048701611c8a565b611e15611e0c60a08301611c94565b60058701611ca7565b611e2c611e2360c083015190565b60068701611d45565b611e44611e3b60e08301611d4f565b600c8701611d59565b611e5c611e5361010083015190565b600d8701611ad1565b611e74611e6b61012083015190565b600e8701611ad1565b611e8c611e8361014083015190565b600f8701611ad1565b611ea4611e9b61016083015190565b60108701611d69565b0151151590565b9101611d77565b906101e291611d87565b90815491680100000000000000008310156108b35782611ee49160016101e295018155610351565b90611b26565b60208082526101f8929101906104d8565b919092611f086112678590565b90611f21600092611f1b61179885610713565b1161196d565b611f3e611f2c845190565b611f3861179885610713565b116119b9565b611f61611f4c608088015190565b611f5a611798612710610713565b1115611a05565b611f8a7f000000000000000000000000000000000000000000000000000000000000000061031a565b611fcd6020611f983061031a565b611fa0610807565b93849187611fad60405190565b809681958294611fc16323b872dd60e01b90565b84523360048501611a51565b03925af1801561175857611fe8918591612138575b50611a75565b611ff26003610acf565b611ffb90611281565b612006906003611ad1565b6120106003610acf565b9661201a84610713565b9261202361136e565b9561202e8a87890152565b33602088015261203f886040890152565b6060870189905260808701526120589060a087016114ac565b60c085015261206a8360e086016114b6565b61010084015261207c42610120850152565b61208582610713565b61014084015261016083015215156101808201526120a4846004610abe565b906120ae91611eb2565b826120ba336005610323565b906120c491611ebc565b826120d0826006610abe565b906120da91611ebc565b6120e383610713565b6120ec3361031a565b916120f690610713565b9261210060405190565b61210b819282611eea565b037fb6ae5e1621020655a470cb0bb692f18b60d65385eeed7b2d91042d72953b6e9891a46101e29061310f565b612151915060203d602011611751576117438183610891565b38611fe2565b906101e294939291611950565b6101f86000610ae2565b6101e29061217a612eda565b600161218a6101e2926009610ea6565b611d77565b6101e29061216e565b906101e2916121a5612eda565b6122e0565b156121b157565b60405162461bcd60e51b815260206004820152601a60248201527f4368616c6c656e676520616c7265616479207265736f6c7665640000000000006044820152606490fd5b9061ff009060081b611ac7565b906122136101f8611ae892151590565b82546121f6565b1561222157565b60405162461bcd60e51b815260206004820152601b60248201527f547261696e6572207374616b652072657475726e206661696c656400000000006044820152606490fd5b8181029291811591840414171561129057565b1561228057565b60405162461bcd60e51b815280611468600482016020808252818101527f4368616c6c656e676520726577617264207472616e73666572206661696c6564604082015260600190565b90151581526040810192916101e291602090611099565b6122ee6101f8826007610abe565b61230961230461230060048401610be6565b1590565b6121aa565b61231f6101f861231883610acf565b6004610abe565b906123388460048301612333600182611d77565b612203565b8315612426576020906123526002600c6123a39501611d59565b61236d61235d610807565b6123676002610713565b90612266565b906116e3600161239c7f000000000000000000000000000000000000000000000000000000000000000061031a565b9201610ae2565b03925af18015611758577f874fd3e0ba6d81d58b06aa295084dbe040084ea483a51e07e5c551498e515a3c926123e86123ed9261240294600091612407575b50612279565b610713565b926123f760405190565b9182913390836122c9565b0390a2565b612420915060203d602011611751576117438183610891565b386123e2565b5060208161243b6001600c61247e9501611d59565b612469600161239c7f000000000000000000000000000000000000000000000000000000000000000061031a565b90612472610807565b9160006116ee60405190565b03925af18015611758577f874fd3e0ba6d81d58b06aa295084dbe040084ea483a51e07e5c551498e515a3c926123e86123ed92612402946000916124c3575b5061221a565b6124dc915060203d602011611751576117438183610891565b386124bd565b906101e291612198565b906101e2916124fb6000610713565b811180612511575b61250c9061141c565b612718565b5061250c6125226101f86003610acf565b8211159050612503565b1561253357565b60405162461bcd60e51b815260206004820152602860248201527f4f6e6c792076657269666965642073657373696f6e732063616e20626520636860448201527f616c6c656e6765640000000000000000000000000000000000000000000000006064820152608490fd5b156125a557565b60405162461bcd60e51b815260206004820152601860248201527f4368616c6c656e676520706572696f64206578706972656400000000000000006044820152606490fd5b156125f157565b60405162461bcd60e51b815260206004820152600f60248201527f526561736f6e20726571756972656400000000000000000000000000000000006044820152606490fd5b1561263d57565b60405162461bcd60e51b815260206004820152601f60248201527f4368616c6c656e6765207374616b65207472616e73666572206661696c6564006044820152606490fd5b9061270860a060046101e2946126a261269c600087015190565b82611ad1565b6126c26126b960208701516001600160a01b031690565b60018301611afb565b6126d96126d0604087015190565b60028301611c8a565b6126f06126e7606087015190565b60038301611ad1565b0192611ea46127026080830151151590565b85611d77565b90612203565b906101e291612682565b906127276101f8836004610abe565b61277561276d6101f861275f600f600c86019561275961274688610be6565b61275361130460016105b3565b1461252c565b01610acf565b612767610d7c565b90611766565b42111561259e565b81519061279060009261278a61179885610713565b116125ea565b6127db60206127be7f000000000000000000000000000000000000000000000000000000000000000061031a565b6127c73061031a565b906127d0610807565b9186611fad60405190565b03925af193841561175857612857846128046128759761287095600398916128c5575b50612636565b61281b6128146113426008610acf565b6008611ad1565b61283c612826610f09565b936128318a84870152565b3360208601526107c4565b612847426060850152565b15156080830181905260a0830152565b61286b6128646008610acf565b6007610abe565b61270e565b611d59565b61288b6128856123e86008610acf565b91610713565b6128943361031a565b917f194e04cbb014fbbe94a0feb6650740dbbfa645ba2fd9265ac1931be1604e03826128bf60405190565b600090a4565b6128de915060203d602011611751576117438183610891565b386127fe565b906101e2916124ec565b6101e2906128fc6000610713565b811180612912575b61290d9061141c565b612bc4565b5061290d6129236101f86003610acf565b8211159050612904565b1561293457565b60405162461bcd60e51b815260206004820152601860248201527f4e6f742070656e64696e6720766572696669636174696f6e00000000000000006044820152606490fd5b1561298057565b60405162461bcd60e51b815260206004820152601960248201527f4e6f206f7261636c65207175657279207375626d6974746564000000000000006044820152606490fd5b9190820391821161129057565b156129d957565b60405162461bcd60e51b815260206004820152601860248201527f4e6f206f7261636c65206461746120617661696c61626c6500000000000000006044820152606490fd5b15612a2557565b60405162461bcd60e51b815260206004820152601360248201527f4f7261636c65206461746120746f6f206f6c64000000000000000000000000006044820152606490fd5b905051906101e2826101cc565b909160c0828403126101c757612a8d8383611616565b92612a9b8160208501612a6a565b92612aa98260408301612a6a565b926101f8612aba8460608501612a6a565b9360a0612aca8260808701612a6a565b9401612a6a565b15612ad857565b60405162461bcd60e51b815260206004820152601660248201527f526577617264207472616e73666572206661696c6564000000000000000000006044820152606490fd5b9060056101f89260c0830192612b3d612b396000840154610ac8565b8252565b612b54612b4d6001840154610ac8565b6020830152565b612b6b612b646002840154610ac8565b6040830152565b612b7b6107cb6003840154610ac8565b612b92612b8b6004840154610ac8565b6080830152565b60a081850391015201610b2c565b916101f892612bb7604082019360008301906105c6565b6020818403910152612b1d565b612bd26101f8826004610abe565b612cb3600c8201612be281610be6565b92612bfb600094612bf5611304876105b3565b1461292d565b611d19612cbc612c9286612c7d612c3660108701612c31612c1b82610acf565b612c2a6117986101f888610713565b1415612979565b610acf565b612c7661179861176d612c69612c70612c61612c5061074e565b96612c5b88426129c5565b906132db565b929098610713565b82116129d2565b426129c5565b1115612a1e565b6020612c87825190565b818301019101612a77565b95949692612caa60068a9c93969c019b8d8d01611ad1565b60018b01611ad1565b60028901611ad1565b612cc98160048701611ad1565b612cd642600f8501611ad1565b81612e2d575b5015612df7576020612d7391612cf3600185611d59565b612d2c600d8201612767612d1c612d12612d0c84610acf565b93610acf565b6123676014610713565b612d266064610713565b90611792565b90612d3b600160118301611d77565b612d69600161239c7f000000000000000000000000000000000000000000000000000000000000000061031a565b876116ee60405190565b03925af191821561175857612db7612dc293612dbc937fbae52c223c9b8ed74b9bbd29cf360c1810156c5ea7960b8efd1d06d701d63e4f9791612dd8575b50612ad1565b610be6565b93610713565b92612402612dcf60405190565b92839283612ba0565b612df1915060203d602011611751576117438183610891565b38612db1565b507fbae52c223c9b8ed74b9bbd29cf360c1810156c5ea7960b8efd1d06d701d63e4f9250612dbc81612db76002612dc294611d59565b9050612e3d6117986101f8610720565b101538612cdc565b6101e2906128ee565b6101e290612e5a612eda565b612e64600061192d565b6001600160a01b0381166001600160a01b03831614612e8757506101e290612f41565b61146890612e9460405190565b9182917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352600483016001600160a01b03909116815260200190565b6101e290612e4e565b612ee2612164565b339081906001600160a01b031603612ef75750565b61146890612f0460405190565b9182917f118cdaa7000000000000000000000000000000000000000000000000000000008352600483016001600160a01b03909116815260200190565b612f67612f61612f516000610ae2565b612f5c846000611afb565b61031a565b9161031a565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0612f9260405190565b600090a3565b6101f86002610713565b612fac6001610acf565b612fb4612f98565b908114612fc6576101e2906001611ad1565b6040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152600490fd5b6101f86001610713565b6101e2613006612ff1565b6001611ad1565b80546000939291613020610b3f83610b02565b9160018116908115610b9b575060011461303957505050565b61304c9192939450600052602060002090565b916000925b81841061305e5750500190565b805484840152602090930192600101613051565b929796946109e0906130c260c0966130bb6130b36107d2976130a56101e29d9860e08c01908c600081840391015261300d565b908a820360208c015261300d565b9c6040890152565b6060870152565b6080850152565b60408082526012908201527f41494d6f64656c506572666f726d616e6365000000000000000000000000000060608201526080602082018190526101f8929101906104d8565b7fc216adb0ee19749379f914811dec6380e4416343e0aa56dc1613e0723f332fbd6124026131fb6010936123e861314a6101f8836004610abe565b600381016131c36004830161316961316460058601610be6565b61053b565b926131b76006860161317a81610acf565b9061318760018201610acf565b61319f600361319860028501610acf565b9301610acf565b926131a960405190565b988997602089019788613072565b90810382520382610891565b6131df6131cf60405190565b80926131b76020830191826130c9565b6131f16131ea825190565b9160200190565b2096879101611d69565b9261320560405190565b918291829081526040602082018190526012908201527f41494d6f64656c506572666f726d616e63650000000000000000000000000000606082015260800190565b90929192613257610905826108cc565b93818552818301116101c7576101e29160208501906104b5565b9080601f830112156101c75781516101f892602001613247565b90916060828403126101c7576132a18383611616565b9260208301519067ffffffffffffffff82116101c7576040612aca826101f8948701613271565b9081526040810192916101e29160200152565b613318916000916132ef612f5c6002610ae2565b906132f960405190565b80958194829361330d63a792765f60e01b90565b8452600484016132c8565b03915afa80156117585760009160009161333157509091565b905061335091503d806000833e6133488183610891565b81019061328b565b909150909156fea26469706673582212205c3b054dc5672da1461e9e7a15c49fb010284399bffaca60a7d7147168384c7c64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806307f60569146101c2578063091d1316146101bd57806309592180146101b85780630afc79af146101b35780631006e4cb146101ae5780631959ad5b146101a957806326d580f9146101a4578063275c315f1461019f57806341f937571461019a57806345cc2c96146101955780635312ea8e1461019057806357fb223c1461018b5780635c71da7e14610186578063702261f614610181578063715018a61461017c5780637f5c7af0146101775780638da5cb5b146101725780638f1d37761461016d57806390bbdfd81461016857806394a754e014610163578063a5bbe22b1461015e578063aedec93714610159578063bbed7fdb14610154578063d1fddfdf1461014f578063df0af1561461014a578063ece09779146101455763f2fde38b036101c757611147565b61110a565b610edc565b610e3d565b610e24565b610dd2565b610d90565b610d63565b610d13565b610cb9565b610a89565b610a6d565b610863565b610848565b610821565b6107d6565b61077c565b610761565b610733565b6106f8565b6106c5565b61049a565b610435565b6103f6565b6103b6565b610295565b61026a565b600080fd5b805b036101c757565b905035906101e2826101cc565b565b906020828203126101c7576101f8916101d5565b90565b9052565b0190565b9061022361021c610212845190565b8084529260200190565b9260200190565b9060005b8181106102345750505090565b90919261025161024a6001928651815260200190565b9460200190565b929101610227565b60208082526101f892910190610203565b346101c7576102916102856102803660046101e4565b6111e4565b60405191829182610259565b0390f35b346101c7576102916102856102ab3660046101e4565b611295565b6001600160a01b031690565b6001600160a01b0381166101ce565b905035906101e2826102bc565b91906040838203126101c7576101f89060206102f482866102cb565b94016101d5565b6102b06101f86101f8926001600160a01b031690565b6101f8906102fb565b6101f890610311565b9061032d9061031a565b600052602052604060002090565b634e487b7160e01b600052603260045260246000fd5b80548210156103745761036b600191600052602060002090565b91020190600090565b61033b565b6101f8916008021c81565b906101f89154610379565b61039a906005610323565b80548210156101c7576101f8916103b091610351565b90610384565b346101c7576102916103d26103cc3660046102d8565b9061038f565b6040519182918290815260200190565b906020828203126101c7576101f8916102cb565b346101c75761029161028561040c3660046103e2565b611357565b60009103126101c757565b6101fb9061031a565b6020810192916101e2919061041c565b346101c757610445366004610411565b6102917f00000000000000000000000000000000000000000000000000000000000000005b60405191829182610425565b6101f8916008021c6102b0565b906101f89154610476565b6101f860006002610483565b346101c7576104aa366004610411565b61029161046a61048e565b60005b8381106104c85750506000910152565b81810151838201526020016104b8565b6104f96105026020936101ff936104ed815190565b80835293849260200190565b958691016104b5565b601f01601f191690565b634e487b7160e01b600052602160045260246000fd5b6007111561052c57565b61050c565b906101e282610522565b6101f890610531565b6101fb9061053b565b805182526101f89160c081019160a09061056c60208201516020850152565b61057b60408201516040850152565b61058a60608201516060850152565b61059960808201516080850152565b01519060a08184039101526104d8565b6005111561052c57565b906101e2826105a9565b6101f8906105b3565b6101fb906105bd565b805182526020808201516001600160a01b031690830152906101f8906101808061065461063061061e6101a0860161060c60408a01516040890152565b606089015187820360608901526104d8565b608088015186820360808801526104d8565b61064260a088015160a0870190610544565b60c087015185820360c087015261054d565b9461066760e082015160e08601906105c6565b610678610100820151610100860152565b610689610120820151610120860152565b61069a610140820151610140860152565b6106ab610160820151610160860152565b01511515910152565b60208082526101f8929101906105cf565b346101c7576102916106e06106db3660046101e4565b6115f4565b604051918291826106b4565b6101f860006003610384565b346101c757610708366004610411565b6102916103d26106ec565b6101f86101f86101f89290565b6101f8611f40610713565b6101f8610720565b346101c757610743366004610411565b6102916103d261072b565b6101f8610384610713565b6101f861074e565b346101c757610771366004610411565b6102916103d2610759565b346101c75761079461078f3660046101e4565b61175d565b604051005b909594926101e2946107cb6107d2926107c46080966107bd60a088019c6000890152565b6020870152565b6040850152565b6060830152565b0152565b346101c7576102916107f16107ec3660046101e4565b6117ac565b916107fe95939560405190565b95869586610799565b6101f868056bc75e2d63100000610713565b6101f8610807565b346101c757610831366004610411565b6102916103d2610819565b6101f860006008610384565b346101c757610858366004610411565b6102916103d261083c565b346101c757610873366004610411565b610794611948565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176108b357604052565b61087b565b906101e26108c560405190565b9283610891565b67ffffffffffffffff81116108b357602090601f01601f19160190565b90826000939282370152565b9092919261090a610905826108cc565b6108b8565b93818552818301116101c7576101e29160208501906108e9565b9080601f830112156101c7578160206101f8933591016108f5565b600711156101c757565b905035906101e28261093f565b91909160c0818403126101c75761096d60c06108b8565b9261097881836101d5565b845261098781602084016101d5565b602085015261099981604084016101d5565b60408501526109ab81606084016101d5565b60608501526109bd81608084016101d5565b608085015260a082013567ffffffffffffffff81116101c7576109e09201610924565b60a0830152565b91909160a0818403126101c7576109fe83826101d5565b92602082013567ffffffffffffffff81116101c75781610a1f918401610924565b92604083013567ffffffffffffffff81116101c75782610a40918501610924565b92610a4e8360608301610949565b92608082013567ffffffffffffffff81116101c7576101f89201610956565b346101c757610794610a803660046109e7565b93929092612157565b346101c757610a99366004610411565b610291610aa4612164565b604051918291826001600160a01b03909116815260200190565b9061032d90610713565b6101f89081565b6101f89054610ac8565b6101f8906102b0565b6101f89054610ad9565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610b22575b6020831014610b1d57565b610aec565b91607f1691610b12565b80546000939291610b49610b3f83610b02565b8085529360200190565b9160018116908115610b9b5750600114610b6257505050565b610b759192939450600052602060002090565b916000925b818410610b875750500190565b805484840152602090930192600101610b7a565b92949550505060ff1916825215156020020190565b906101f891610b2c565b906101e2610bd492610bcb60405190565b93848092610bb0565b0383610891565b6101f8905b60ff1690565b6101f89054610bdb565b6101f89060081c610be0565b6101f89054610bf0565b610c11906007610abe565b90610c1b82610acf565b91610c2860018201610ae2565b91610c3560028301610bba565b91610c4260038201610acf565b916101f86004610c53818501610be6565b9301610bfc565b9194610ca8610ca0610cb19360a096610c936101e29a9c9b999c610c8360c08a019460008b0152565b6001600160a01b03166020890152565b86820360408801526104d8565b986060850152565b15156080830152565b019015159052565b346101c757610291610cd4610ccf3660046101e4565b610c06565b92610ce496949692919260405190565b96879687610c5a565b906020828203126101c757813567ffffffffffffffff81116101c7576101f89201610924565b346101c757610794610d26366004610ced565b61218f565b8015156101ce565b905035906101e282610d2b565b91906040838203126101c7576101f8906020610d5c82866101d5565b9401610d33565b346101c757610794610d76366004610d40565b906124e2565b6101f862015180610713565b6101f8610d7c565b346101c757610da0366004610411565b6102916103d2610d88565b91906040838203126101c7576101f89060206102f482866101d5565b61039a906006610abe565b346101c7576102916103d2610de8366004610dab565b90610dc7565b9190916040818403126101c757610e0583826101d5565b92602082013567ffffffffffffffff81116101c7576101f89201610924565b346101c757610794610e37366004610dee565b906128e4565b346101c757610794610e503660046101e4565b612e45565b6101ff610e6d92602092610e67815190565b94859290565b938491016104b5565b610e866101ff9160209493610e55565b918252565b610ea0610e9760405190565b92839283610e76565b03902090565b6101f891610e8b565b6101f8916008021c610be0565b906101f89154610eaf565b6000610ed76101f8926009610ea6565b610ebc565b346101c757610291610ef7610ef2366004610ced565b610ec7565b60405191829182901515815260200190565b6101f860c06108b8565b906101e2610f936005610f24610f09565b94610f35610f3182610acf565b8752565b610f4b610f4460018301610acf565b6020880152565b610f61610f5a60028301610acf565b6040880152565b610f77610f7060038301610acf565b6060880152565b610f8d610f8660048301610acf565b6080880152565b01610bba565b60a0840152565b610fa5906004610abe565b610fae81610acf565b91610fbb60018301610ae2565b91610fc860028201610acf565b91610fd560038301610bba565b91610fe260048201610bba565b91610fef60058301610be6565b91610ffc60068201610f13565b91611009600c8301610be6565b91611016600d8201610acf565b91611023600e8301610acf565b91611030600f8201610acf565b916101f8601161104260108501610acf565b9301610be6565b98906110df610cb1999f9e9c966101e29e996110d26111029a6101809f988f946110ca906110bc6110ea996110fa9e6110af60a0966110f29f6110a89060208e6110996101a08201986000830152565b01906001600160a01b03169052565b60408c0152565b89820360608b01526104d8565b9087820360808901526104d8565b940190610544565b8c820360c08e015261054d565b9e60e08b01906105c6565b610100890152565b610120870152565b610140850152565b610160830152565b346101c7576102916111256111203660046101e4565b610f9a565b9961113e9d9b9d99919998929897939796949660405190565b9d8e9d8e611049565b346101c75761079461115a3660046103e2565b612ed1565b9061117a61116e610212845490565b92600052602060002090565b9060005b81811061118b5750505090565b9091926111af6111a86001926111a087610acf565b815260200190565b9460010190565b92910161117e565b906101f89161115f565b906101e2610bd4926111d260405190565b938480926111b7565b6101f8906111c1565b6111fb6101f8916111f3606090565b506006610abe565b6111db565b67ffffffffffffffff81116108b35760208091020190565b90610e8661090583611200565b369037565b906101e261124061123a84611218565b93611200565b601f190160208401611225565b90611256825190565b811015610374576020809102010190565b5190565b634e487b7160e01b600052601160045260246000fd5b60001981146112905760010190565b61126b565b6111fb6112a4916111f3606090565b906112b56112b0835190565b61122a565b6112bf6000610713565b90815b6112cd6101f8865190565b81101561134f576112f7600c6112f160046112eb611267868b61124d565b90610abe565b01610be6565b61130a61130460016105b3565b916105b3565b1461131d575b6001016112c2565b6112c2565b9161134761131891611342611335611267878a61124d565b61133f838761124d565b52565b611281565b929050611310565b509081529150565b6111fb6101f891611366606090565b506005610323565b6101f86101a06108b8565b611381610f09565b906000825260208080808080870160008152016000815201600081520160008152016060905250565b6101f8611379565b6020908180808080808080808080806113c961136e565b9d8e6000815201600081520160008152016060815201606081520160008152016113f16113aa565b815201600081520160008152016000815201600081520160008152016000905250565b6101f86113b2565b1561142357565b60405162461bcd60e51b815260206004820152601360248201527f496e76616c696420747261696e696e67204944000000000000000000000000006044820152606490fd5b0390fd5b906101f89161147b6000610713565b821180611491575b61148c9061141c565b6115df565b5061148c6114a26101f86003610acf565b8311159050611483565b906101fb90610531565b906101fb906105b3565b906101e26115cc60116114d161136e565b946114de610f3182610acf565b6114fd6114ed60018301610ae2565b6001600160a01b03166020880152565b61150c610f5a60028301610acf565b61151b610f7060038301610bba565b61152a610f8660048301610bba565b61154261153960058301610be6565b60a088016114ac565b61155861155160068301610f13565b60c0880152565b611570611567600c8301610be6565b60e088016114b6565b61158761157f600d8301610acf565b610100880152565b61159e611596600e8301610acf565b610120880152565b6115b56115ad600f8301610acf565b610140880152565b6112f16115c460108301610acf565b610160880152565b1515610180840152565b6101f8906114c0565b6101f8916115ef91506004610abe565b6115d6565b6101f890611600611414565b61146c565b6101e290611611612eda565b6116ac565b905051906101e282610d2b565b906020828203126101c7576101f891611616565b6001600160a01b0390911681526040810192916101e29160200152565b6040513d6000823e3d90fd5b1561166757565b60405162461bcd60e51b815260206004820152601160248201527f5769746864726177616c206661696c65640000000000000000000000000000006044820152606490fd5b602061170d916116db7f000000000000000000000000000000000000000000000000000000000000000061031a565b6116e3612164565b60006116ee60405190565b80968195829461170263a9059cbb60e01b90565b845260048401611637565b03925af18015611758576101e291600091611729575b50611660565b61174b915060203d602011611751575b6117438183610891565b810190611623565b38611723565b503d611739565b611654565b6101e290611605565b9190611771565b9290565b820180921161129057565b634e487b7160e01b600052601260045260246000fd5b9061179c565b9190565b9081156117a7570490565b61177c565b90600091828093816117c46111fb6006956006610abe565b936000966117d188610713565b9586948792889589988a5b6117e76101f8875190565b8110156118af578d6118046101f860046112eb611267868c61124d565b90611811600c8301610be6565b91600192611821611304856105b3565b14611839575b5050506118349060010190565b6117dc565b8a909e91999c929e9d9b939d0198890161185290610acf565b61185b91611766565b9c880161186790610acf565b61187091611766565b9961187d60028901610acf565b61188691611766565b9660030161189390610acf565b61189c91611766565b976118a690611281565b99388e81611827565b509896935098919a6118c4919a979550610713565b85116118d2575b5050505090565b8480975080949a50611900939950809298506118f4611906966118fa93611792565b9a611792565b97611792565b94611792565b91388080806118cb565b611918612eda565b6101e2611936565b6102b06101f86101f89290565b6101f890611920565b6101e2611943600061192d565b612f41565b6101e2611910565b9061196594939291611960612fa2565b611efb565b6101e2612ffb565b1561197457565b60405162461bcd60e51b815260206004820152601360248201527f4d6f64656c2068617368207265717569726564000000000000000000000000006044820152606490fd5b156119c057565b60405162461bcd60e51b815260206004820152601560248201527f44617461736574206861736820726571756972656400000000000000000000006044820152606490fd5b15611a0c57565b60405162461bcd60e51b815260206004820152601860248201527f496e76616c696420636f6e666964656e6365206c6576656c00000000000000006044820152606490fd5b6001600160a01b039182168152911660208201526060810192916101e29160400152565b15611a7c57565b60405162461bcd60e51b815260206004820152601560248201527f5374616b65207472616e73666572206661696c656400000000000000000000006044820152606490fd5b90600019905b9181191691161790565b90611ae16101f8611ae892610713565b8254611ac1565b9055565b906001600160a01b0390611ac7565b90611b0b6101f8611ae89261031a565b8254611aec565b9160001960089290920291821b911b611ac7565b9190611b376101f8611ae893610713565b908354611b12565b6101e291600091611b26565b818110611b56575050565b80611b646000600193611b3f565b01611b4b565b9190601f8111611b7957505050565b611b8b6101e293600052602060002090565b906020601f840181900483019310611bad575b6020601f909101040190611b4b565b9091508190611b9e565b90611bc0815190565b9067ffffffffffffffff82116108b357611be482611bde8554610b02565b85611b6a565b602090601f8311600114611c1f57611ae8929160009183611c14575b5050600019600883021c1916906002021790565b015190503880611c00565b601f19831691611c3485600052602060002090565b9260005b818110611c7257509160029391856001969410611c59575b50505002019055565b01516000196008601f8516021c19169055388080611c50565b91936020600181928787015181550195019201611c38565b906101e291611bb7565b6101f89051610531565b9060ff90611ac7565b90611cb76101f8611ae89261053b565b8254611c9e565b6005611d3e60a06101e294611cdd611cd7600083015190565b86611ad1565b611cf4611ceb602083015190565b60018701611ad1565b611d0b611d02604083015190565b60028701611ad1565b611d22611d19606083015190565b60038701611ad1565b611d39611d30608083015190565b60048701611ad1565b015190565b9101611c8a565b906101e291611cbe565b6101f890516105b3565b90611cb76101f8611ae8926105bd565b90611ae16101f8611ae89290565b90611cb76101f8611ae892151590565b6011611eab6101806101e294611da1611cd7600083015190565b611dc1611db860208301516001600160a01b031690565b60018701611afb565b611dcf611d02604083015190565b611de6611ddd606083015190565b60038701611c8a565b611dfd611df4608083015190565b60048701611c8a565b611e15611e0c60a08301611c94565b60058701611ca7565b611e2c611e2360c083015190565b60068701611d45565b611e44611e3b60e08301611d4f565b600c8701611d59565b611e5c611e5361010083015190565b600d8701611ad1565b611e74611e6b61012083015190565b600e8701611ad1565b611e8c611e8361014083015190565b600f8701611ad1565b611ea4611e9b61016083015190565b60108701611d69565b0151151590565b9101611d77565b906101e291611d87565b90815491680100000000000000008310156108b35782611ee49160016101e295018155610351565b90611b26565b60208082526101f8929101906104d8565b919092611f086112678590565b90611f21600092611f1b61179885610713565b1161196d565b611f3e611f2c845190565b611f3861179885610713565b116119b9565b611f61611f4c608088015190565b611f5a611798612710610713565b1115611a05565b611f8a7f000000000000000000000000000000000000000000000000000000000000000061031a565b611fcd6020611f983061031a565b611fa0610807565b93849187611fad60405190565b809681958294611fc16323b872dd60e01b90565b84523360048501611a51565b03925af1801561175857611fe8918591612138575b50611a75565b611ff26003610acf565b611ffb90611281565b612006906003611ad1565b6120106003610acf565b9661201a84610713565b9261202361136e565b9561202e8a87890152565b33602088015261203f886040890152565b6060870189905260808701526120589060a087016114ac565b60c085015261206a8360e086016114b6565b61010084015261207c42610120850152565b61208582610713565b61014084015261016083015215156101808201526120a4846004610abe565b906120ae91611eb2565b826120ba336005610323565b906120c491611ebc565b826120d0826006610abe565b906120da91611ebc565b6120e383610713565b6120ec3361031a565b916120f690610713565b9261210060405190565b61210b819282611eea565b037fb6ae5e1621020655a470cb0bb692f18b60d65385eeed7b2d91042d72953b6e9891a46101e29061310f565b612151915060203d602011611751576117438183610891565b38611fe2565b906101e294939291611950565b6101f86000610ae2565b6101e29061217a612eda565b600161218a6101e2926009610ea6565b611d77565b6101e29061216e565b906101e2916121a5612eda565b6122e0565b156121b157565b60405162461bcd60e51b815260206004820152601a60248201527f4368616c6c656e676520616c7265616479207265736f6c7665640000000000006044820152606490fd5b9061ff009060081b611ac7565b906122136101f8611ae892151590565b82546121f6565b1561222157565b60405162461bcd60e51b815260206004820152601b60248201527f547261696e6572207374616b652072657475726e206661696c656400000000006044820152606490fd5b8181029291811591840414171561129057565b1561228057565b60405162461bcd60e51b815280611468600482016020808252818101527f4368616c6c656e676520726577617264207472616e73666572206661696c6564604082015260600190565b90151581526040810192916101e291602090611099565b6122ee6101f8826007610abe565b61230961230461230060048401610be6565b1590565b6121aa565b61231f6101f861231883610acf565b6004610abe565b906123388460048301612333600182611d77565b612203565b8315612426576020906123526002600c6123a39501611d59565b61236d61235d610807565b6123676002610713565b90612266565b906116e3600161239c7f000000000000000000000000000000000000000000000000000000000000000061031a565b9201610ae2565b03925af18015611758577f874fd3e0ba6d81d58b06aa295084dbe040084ea483a51e07e5c551498e515a3c926123e86123ed9261240294600091612407575b50612279565b610713565b926123f760405190565b9182913390836122c9565b0390a2565b612420915060203d602011611751576117438183610891565b386123e2565b5060208161243b6001600c61247e9501611d59565b612469600161239c7f000000000000000000000000000000000000000000000000000000000000000061031a565b90612472610807565b9160006116ee60405190565b03925af18015611758577f874fd3e0ba6d81d58b06aa295084dbe040084ea483a51e07e5c551498e515a3c926123e86123ed92612402946000916124c3575b5061221a565b6124dc915060203d602011611751576117438183610891565b386124bd565b906101e291612198565b906101e2916124fb6000610713565b811180612511575b61250c9061141c565b612718565b5061250c6125226101f86003610acf565b8211159050612503565b1561253357565b60405162461bcd60e51b815260206004820152602860248201527f4f6e6c792076657269666965642073657373696f6e732063616e20626520636860448201527f616c6c656e6765640000000000000000000000000000000000000000000000006064820152608490fd5b156125a557565b60405162461bcd60e51b815260206004820152601860248201527f4368616c6c656e676520706572696f64206578706972656400000000000000006044820152606490fd5b156125f157565b60405162461bcd60e51b815260206004820152600f60248201527f526561736f6e20726571756972656400000000000000000000000000000000006044820152606490fd5b1561263d57565b60405162461bcd60e51b815260206004820152601f60248201527f4368616c6c656e6765207374616b65207472616e73666572206661696c6564006044820152606490fd5b9061270860a060046101e2946126a261269c600087015190565b82611ad1565b6126c26126b960208701516001600160a01b031690565b60018301611afb565b6126d96126d0604087015190565b60028301611c8a565b6126f06126e7606087015190565b60038301611ad1565b0192611ea46127026080830151151590565b85611d77565b90612203565b906101e291612682565b906127276101f8836004610abe565b61277561276d6101f861275f600f600c86019561275961274688610be6565b61275361130460016105b3565b1461252c565b01610acf565b612767610d7c565b90611766565b42111561259e565b81519061279060009261278a61179885610713565b116125ea565b6127db60206127be7f000000000000000000000000000000000000000000000000000000000000000061031a565b6127c73061031a565b906127d0610807565b9186611fad60405190565b03925af193841561175857612857846128046128759761287095600398916128c5575b50612636565b61281b6128146113426008610acf565b6008611ad1565b61283c612826610f09565b936128318a84870152565b3360208601526107c4565b612847426060850152565b15156080830181905260a0830152565b61286b6128646008610acf565b6007610abe565b61270e565b611d59565b61288b6128856123e86008610acf565b91610713565b6128943361031a565b917f194e04cbb014fbbe94a0feb6650740dbbfa645ba2fd9265ac1931be1604e03826128bf60405190565b600090a4565b6128de915060203d602011611751576117438183610891565b386127fe565b906101e2916124ec565b6101e2906128fc6000610713565b811180612912575b61290d9061141c565b612bc4565b5061290d6129236101f86003610acf565b8211159050612904565b1561293457565b60405162461bcd60e51b815260206004820152601860248201527f4e6f742070656e64696e6720766572696669636174696f6e00000000000000006044820152606490fd5b1561298057565b60405162461bcd60e51b815260206004820152601960248201527f4e6f206f7261636c65207175657279207375626d6974746564000000000000006044820152606490fd5b9190820391821161129057565b156129d957565b60405162461bcd60e51b815260206004820152601860248201527f4e6f206f7261636c65206461746120617661696c61626c6500000000000000006044820152606490fd5b15612a2557565b60405162461bcd60e51b815260206004820152601360248201527f4f7261636c65206461746120746f6f206f6c64000000000000000000000000006044820152606490fd5b905051906101e2826101cc565b909160c0828403126101c757612a8d8383611616565b92612a9b8160208501612a6a565b92612aa98260408301612a6a565b926101f8612aba8460608501612a6a565b9360a0612aca8260808701612a6a565b9401612a6a565b15612ad857565b60405162461bcd60e51b815260206004820152601660248201527f526577617264207472616e73666572206661696c6564000000000000000000006044820152606490fd5b9060056101f89260c0830192612b3d612b396000840154610ac8565b8252565b612b54612b4d6001840154610ac8565b6020830152565b612b6b612b646002840154610ac8565b6040830152565b612b7b6107cb6003840154610ac8565b612b92612b8b6004840154610ac8565b6080830152565b60a081850391015201610b2c565b916101f892612bb7604082019360008301906105c6565b6020818403910152612b1d565b612bd26101f8826004610abe565b612cb3600c8201612be281610be6565b92612bfb600094612bf5611304876105b3565b1461292d565b611d19612cbc612c9286612c7d612c3660108701612c31612c1b82610acf565b612c2a6117986101f888610713565b1415612979565b610acf565b612c7661179861176d612c69612c70612c61612c5061074e565b96612c5b88426129c5565b906132db565b929098610713565b82116129d2565b426129c5565b1115612a1e565b6020612c87825190565b818301019101612a77565b95949692612caa60068a9c93969c019b8d8d01611ad1565b60018b01611ad1565b60028901611ad1565b612cc98160048701611ad1565b612cd642600f8501611ad1565b81612e2d575b5015612df7576020612d7391612cf3600185611d59565b612d2c600d8201612767612d1c612d12612d0c84610acf565b93610acf565b6123676014610713565b612d266064610713565b90611792565b90612d3b600160118301611d77565b612d69600161239c7f000000000000000000000000000000000000000000000000000000000000000061031a565b876116ee60405190565b03925af191821561175857612db7612dc293612dbc937fbae52c223c9b8ed74b9bbd29cf360c1810156c5ea7960b8efd1d06d701d63e4f9791612dd8575b50612ad1565b610be6565b93610713565b92612402612dcf60405190565b92839283612ba0565b612df1915060203d602011611751576117438183610891565b38612db1565b507fbae52c223c9b8ed74b9bbd29cf360c1810156c5ea7960b8efd1d06d701d63e4f9250612dbc81612db76002612dc294611d59565b9050612e3d6117986101f8610720565b101538612cdc565b6101e2906128ee565b6101e290612e5a612eda565b612e64600061192d565b6001600160a01b0381166001600160a01b03831614612e8757506101e290612f41565b61146890612e9460405190565b9182917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352600483016001600160a01b03909116815260200190565b6101e290612e4e565b612ee2612164565b339081906001600160a01b031603612ef75750565b61146890612f0460405190565b9182917f118cdaa7000000000000000000000000000000000000000000000000000000008352600483016001600160a01b03909116815260200190565b612f67612f61612f516000610ae2565b612f5c846000611afb565b61031a565b9161031a565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0612f9260405190565b600090a3565b6101f86002610713565b612fac6001610acf565b612fb4612f98565b908114612fc6576101e2906001611ad1565b6040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152600490fd5b6101f86001610713565b6101e2613006612ff1565b6001611ad1565b80546000939291613020610b3f83610b02565b9160018116908115610b9b575060011461303957505050565b61304c9192939450600052602060002090565b916000925b81841061305e5750500190565b805484840152602090930192600101613051565b929796946109e0906130c260c0966130bb6130b36107d2976130a56101e29d9860e08c01908c600081840391015261300d565b908a820360208c015261300d565b9c6040890152565b6060870152565b6080850152565b60408082526012908201527f41494d6f64656c506572666f726d616e6365000000000000000000000000000060608201526080602082018190526101f8929101906104d8565b7fc216adb0ee19749379f914811dec6380e4416343e0aa56dc1613e0723f332fbd6124026131fb6010936123e861314a6101f8836004610abe565b600381016131c36004830161316961316460058601610be6565b61053b565b926131b76006860161317a81610acf565b9061318760018201610acf565b61319f600361319860028501610acf565b9301610acf565b926131a960405190565b988997602089019788613072565b90810382520382610891565b6131df6131cf60405190565b80926131b76020830191826130c9565b6131f16131ea825190565b9160200190565b2096879101611d69565b9261320560405190565b918291829081526040602082018190526012908201527f41494d6f64656c506572666f726d616e63650000000000000000000000000000606082015260800190565b90929192613257610905826108cc565b93818552818301116101c7576101e29160208501906104b5565b9080601f830112156101c75781516101f892602001613247565b90916060828403126101c7576132a18383611616565b9260208301519067ffffffffffffffff82116101c7576040612aca826101f8948701613271565b9081526040810192916101e29160200152565b613318916000916132ef612f5c6002610ae2565b906132f960405190565b80958194829361330d63a792765f60e01b90565b8452600484016132c8565b03915afa80156117585760009160009161333157509091565b905061335091503d806000833e6133488183610891565b81019061328b565b909150909156fea26469706673582212205c3b054dc5672da1461e9e7a15c49fb010284399bffaca60a7d7147168384c7c64736f6c63430008180033",
  "devdoc": {
    "details": "AI model verification system using Tellor oracles",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addSupportedQueryType(string)": {
        "params": {
          "queryType": "Query type to add"
        }
      },
      "constructor": {
        "details": "Constructor",
        "params": {
          "_tellor": "Tellor oracle contract address",
          "_usdfc": "USDFC token contract address"
        }
      },
      "emergencyWithdraw(uint256)": {
        "params": {
          "amount": "Amount to withdraw"
        }
      },
      "getDatasetPerformanceStats(uint256)": {
        "params": {
          "datasetId": "Dataset ID"
        },
        "returns": {
          "avgAccuracy": "Average accuracy",
          "avgF1Score": "Average F1 score",
          "avgPrecision": "Average precision",
          "avgRecall": "Average recall",
          "sessionCount": "Number of verified sessions"
        }
      },
      "getDatasetTrainingSessions(uint256)": {
        "params": {
          "datasetId": "Dataset ID"
        },
        "returns": {
          "_0": "Array of training session IDs"
        }
      },
      "getTrainerSessions(address)": {
        "params": {
          "trainer": "Trainer address"
        },
        "returns": {
          "_0": "Array of training session IDs"
        }
      },
      "getTrainingSession(uint256)": {
        "params": {
          "trainingId": "Training session ID"
        },
        "returns": {
          "_0": "Training session details"
        }
      },
      "getVerificationResult(uint256)": {
        "params": {
          "trainingId": "Training session ID"
        }
      },
      "getVerifiedTrainingSessions(uint256)": {
        "params": {
          "datasetId": "Dataset ID"
        },
        "returns": {
          "_0": "Array of verified training session IDs"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "resolveChallenge(uint256,bool)": {
        "params": {
          "challengeId": "Challenge ID to resolve",
          "isValid": "Whether the challenge is valid"
        }
      },
      "submitChallenge(uint256,string)": {
        "params": {
          "reason": "Reason for the challenge",
          "trainingId": "Training session to challenge"
        }
      },
      "submitTraining(uint256,string,string,uint8,(uint256,uint256,uint256,uint256,uint256,string))": {
        "params": {
          "datasetHash": "IPFS hash of the dataset",
          "datasetId": "Dataset used for training",
          "metrics": "Self-reported performance metrics",
          "modelHash": "IPFS hash of the trained model",
          "modelType": "Type of AI model"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "VerifiAIVerification",
    "version": 1
  },
  "userdoc": {
    "events": {
      "TrainingSubmitted(uint256,address,uint256,string)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "DISPUTE_PERIOD()": {
        "notice": "Dispute period for challenges (24 hours)"
      },
      "MIN_CONFIDENCE()": {
        "notice": "Minimum confidence threshold for verification (80%)"
      },
      "ORACLE_TIMEOUT()": {
        "notice": "Time window for oracle responses (15 minutes)"
      },
      "TRAINING_STAKE()": {
        "notice": "Minimum stake required for submitting training proofs"
      },
      "addSupportedQueryType(string)": {
        "notice": "Add supported Tellor query type (admin function)"
      },
      "challenges(uint256)": {
        "notice": "Mapping of challenge ID to challenge details"
      },
      "currentChallengeId()": {
        "notice": "Current challenge ID counter"
      },
      "currentTrainingId()": {
        "notice": "Current training session ID counter"
      },
      "datasetTrainingSessions(uint256,uint256)": {
        "notice": "Mapping of dataset to training sessions using it"
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Emergency withdrawal of stuck funds (admin function)"
      },
      "getDatasetPerformanceStats(uint256)": {
        "notice": "Calculate average performance metrics for a dataset"
      },
      "getDatasetTrainingSessions(uint256)": {
        "notice": "Get training sessions using a dataset"
      },
      "getTrainerSessions(address)": {
        "notice": "Get training sessions by trainer"
      },
      "getTrainingSession(uint256)": {
        "notice": "Get training session details"
      },
      "getVerificationResult(uint256)": {
        "notice": "Get verification result from Tellor oracle"
      },
      "getVerifiedTrainingSessions(uint256)": {
        "notice": "Get verified training sessions for a dataset"
      },
      "resolveChallenge(uint256,bool)": {
        "notice": "Resolve a challenge (admin function)"
      },
      "submitChallenge(uint256,string)": {
        "notice": "Submit a challenge to a verified training session"
      },
      "submitTraining(uint256,string,string,uint8,(uint256,uint256,uint256,uint256,uint256,string))": {
        "notice": "Submit AI training session for verification"
      },
      "supportedQueryTypes(string)": {
        "notice": "Mapping for custom Tellor query types"
      },
      "trainerSessions(address,uint256)": {
        "notice": "Mapping of trainer to their training session IDs"
      },
      "trainingSessions(uint256)": {
        "notice": "Mapping of training ID to training session"
      },
      "usdfc()": {
        "notice": "USDFC token for payments and stakes"
      }
    },
    "notice": "Verifies AI training sessions and model performance metrics",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1068,
        "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3910,
        "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 38280,
        "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
        "label": "tellor",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITellor)38943"
      },
      {
        "astId": 19164,
        "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
        "label": "currentTrainingId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 19245,
        "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
        "label": "trainingSessions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TrainingSession)19225_storage)"
      },
      {
        "astId": 19251,
        "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
        "label": "trainerSessions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 19257,
        "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
        "label": "datasetTrainingSessions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 19263,
        "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
        "label": "challenges",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Challenge)19239_storage)"
      },
      {
        "astId": 19266,
        "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
        "label": "currentChallengeId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 19271,
        "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
        "label": "supportedQueryTypes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITellor)38943": {
        "encoding": "inplace",
        "label": "contract ITellor",
        "numberOfBytes": "20"
      },
      "t_enum(ModelType)19180": {
        "encoding": "inplace",
        "label": "enum VerifiAIVerification.ModelType",
        "numberOfBytes": "1"
      },
      "t_enum(VerificationStatus)19171": {
        "encoding": "inplace",
        "label": "enum VerifiAIVerification.VerificationStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Challenge)19239_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VerifiAIVerification.Challenge)",
        "numberOfBytes": "32",
        "value": "t_struct(Challenge)19239_storage"
      },
      "t_mapping(t_uint256,t_struct(TrainingSession)19225_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VerifiAIVerification.TrainingSession)",
        "numberOfBytes": "32",
        "value": "t_struct(TrainingSession)19225_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Challenge)19239_storage": {
        "encoding": "inplace",
        "label": "struct VerifiAIVerification.Challenge",
        "members": [
          {
            "astId": 19228,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "trainingId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19230,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "challenger",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19232,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "reason",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 19234,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "challengeTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19236,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "isResolved",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 19238,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "isValid",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PerformanceMetrics)19194_storage": {
        "encoding": "inplace",
        "label": "struct VerifiAIVerification.PerformanceMetrics",
        "members": [
          {
            "astId": 19183,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "accuracy",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19185,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "precision",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19187,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "recall",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19189,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "f1Score",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19191,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "confidence",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19193,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "customMetrics",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(TrainingSession)19225_storage": {
        "encoding": "inplace",
        "label": "struct VerifiAIVerification.TrainingSession",
        "members": [
          {
            "astId": 19197,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19199,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "trainer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19201,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "datasetId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19203,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "modelHash",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 19205,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "datasetHash",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 19208,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "modelType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ModelType)19180"
          },
          {
            "astId": 19211,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "metrics",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(PerformanceMetrics)19194_storage"
          },
          {
            "astId": 19214,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "status",
            "offset": 0,
            "slot": "12",
            "type": "t_enum(VerificationStatus)19171"
          },
          {
            "astId": 19216,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "stakeAmount",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 19218,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "submissionTime",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 19220,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "verificationTime",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 19222,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "tellorQueryId",
            "offset": 0,
            "slot": "16",
            "type": "t_bytes32"
          },
          {
            "astId": 19224,
            "contract": "contracts/VerifiAIVerification.sol:VerifiAIVerification",
            "label": "hasReward",
            "offset": 0,
            "slot": "17",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}